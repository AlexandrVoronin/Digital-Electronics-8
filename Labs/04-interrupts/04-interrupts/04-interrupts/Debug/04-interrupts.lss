
04-interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a61  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  00000e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d3  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  000018c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f3  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000219b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_9>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 65 00 	call	0xca	; 0xca <main>
  78:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_write_low>:
  98:	fc 01       	movw	r30, r24
  9a:	90 81       	ld	r25, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_write_low+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_write_low+0xa>
  aa:	20 95       	com	r18
  ac:	29 23       	and	r18, r25
  ae:	20 83       	st	Z, r18
  b0:	08 95       	ret

000000b2 <GPIO_toggle>:

/*--------------------------------------------------------------------*/
/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
  b2:	fc 01       	movw	r30, r24
  b4:	40 81       	ld	r20, Z
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <GPIO_toggle+0xe>
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <GPIO_toggle+0xa>
  c4:	24 27       	eor	r18, r20
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret

000000ca <main>:
 * on Multi-function shield with internal 8- and 16-bit timer modules.
 */
int main(void)
{
    /* Configuration of three LEDs */
    GPIO_config_output(&DDRB, LED_D2);
  ca:	64 e0       	ldi	r22, 0x04	; 4
  cc:	84 e2       	ldi	r24, 0x24	; 36
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_D2);
  d4:	64 e0       	ldi	r22, 0x04	; 4
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
    // WRITE YOUR CODE HERE
	
	/*Configuring LED 1 */
	GPIO_config_output(&DDRB, LED_D1);
  de:	65 e0       	ldi	r22, 0x05	; 5
  e0:	84 e2       	ldi	r24, 0x24	; 36
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D1);
  e8:	65 e0       	ldi	r22, 0x05	; 5
  ea:	85 e2       	ldi	r24, 0x25	; 37
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>
	
	/*Configuring LED 3 */
	GPIO_config_output(&DDRB, LED_D3);
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	84 e2       	ldi	r24, 0x24	; 36
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
	GPIO_write_low(&PORTB, LED_D3);
  fc:	63 e0       	ldi	r22, 0x03	; 3
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_write_low>

    /* Configuration of 8-bit Timer/Counter0 */
    // WRITE YOUR CODE HERE
	TIM0_overflow_128us();
 106:	85 b5       	in	r24, 0x25	; 37
 108:	8a 7f       	andi	r24, 0xFA	; 250
 10a:	85 bd       	out	0x25, r24	; 37
 10c:	85 b5       	in	r24, 0x25	; 37
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 112:	ee e6       	ldi	r30, 0x6E	; 110
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24

    /* Configuration of 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
    TIM1_overflow_262ms();
 11c:	e1 e8       	ldi	r30, 0x81	; 129
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8b 7f       	andi	r24, 0xFB	; 251
 124:	80 83       	st	Z, r24
 126:	80 81       	ld	r24, Z
 128:	83 60       	ori	r24, 0x03	; 3
 12a:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 12c:	ef e6       	ldi	r30, 0x6F	; 111
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 83       	st	Z, r24

    /* Configuration of 8-bit Timer/Counter2 */
    // WRITE YOUR CODE HERE
	TIM2_overflow_512us();
 136:	e1 eb       	ldi	r30, 0xB1	; 177
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8b 7f       	andi	r24, 0xFB	; 251
 13e:	80 83       	st	Z, r24
 140:	80 81       	ld	r24, Z
 142:	83 60       	ori	r24, 0x03	; 3
 144:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 146:	e0 e7       	ldi	r30, 0x70	; 112
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 150:	78 94       	sei
 152:	ff cf       	rjmp	.-2      	; 0x152 <main+0x88>

00000154 <__vector_13>:
/* Interrupt service routines ----------------------------------------*/
/**
 * ISR starts when Timer/Counter1 overflows. Toggle LED D2 on 
 * Multi-function shield. */
ISR(TIMER1_OVF_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	ef 93       	push	r30
 174:	ff 93       	push	r31
    // WRITE YOUR CODE HERE
	GPIO_toggle(&PORTB,LED_D2);
 176:	64 e0       	ldi	r22, 0x04	; 4
 178:	85 e2       	ldi	r24, 0x25	; 37
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_toggle>
	GPIO_toggle(&PORTB,LED_D2);
 180:	64 e0       	ldi	r22, 0x04	; 4
 182:	85 e2       	ldi	r24, 0x25	; 37
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_toggle>
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_16>:

/*Toggle LED_D1*/
ISR(TIMER0_OVF_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	4f 93       	push	r20
 1bc:	5f 93       	push	r21
 1be:	6f 93       	push	r22
 1c0:	7f 93       	push	r23
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
 1c6:	af 93       	push	r26
 1c8:	bf 93       	push	r27
 1ca:	ef 93       	push	r30
 1cc:	ff 93       	push	r31
	// WRITE YOUR CODE HERE
	GPIO_toggle(&PORTB,LED_D1);
 1ce:	65 e0       	ldi	r22, 0x05	; 5
 1d0:	85 e2       	ldi	r24, 0x25	; 37
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_toggle>
	GPIO_toggle(&PORTB,LED_D1);
 1d8:	65 e0       	ldi	r22, 0x05	; 5
 1da:	85 e2       	ldi	r24, 0x25	; 37
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_toggle>
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	// WRITE YOUR CODE HERE
	GPIO_toggle(&PORTB,LED_D3);
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	85 e2       	ldi	r24, 0x25	; 37
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_toggle>
	GPIO_toggle(&PORTB,LED_D3);
 230:	63 e0       	ldi	r22, 0x03	; 3
 232:	85 e2       	ldi	r24, 0x25	; 37
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 59 00 	call	0xb2	; 0xb2 <GPIO_toggle>
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	7f 91       	pop	r23
 248:	6f 91       	pop	r22
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
