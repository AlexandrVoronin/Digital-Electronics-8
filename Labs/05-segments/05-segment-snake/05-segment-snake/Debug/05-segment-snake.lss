
05-segment-snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  000003d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dee  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  000012d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062d  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000415  00000000  00000000  000027df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 13 01 	call	0x226	; 0x226 <SEG_init>

    // Test of SSD: display number '3' at position 0
	// Timer 0 8-bit
    TIM0_overflow_16us();
  f4:	85 b5       	in	r24, 0x25	; 37
  f6:	89 7f       	andi	r24, 0xF9	; 249
  f8:	85 bd       	out	0x25, r24	; 37
  fa:	85 b5       	in	r24, 0x25	; 37
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 100:	ee e6       	ldi	r30, 0x6E	; 110
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	81 60       	ori	r24, 0x01	; 1
 108:	80 83       	st	Z, r24

	
    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_262ms();
 10a:	e1 e8       	ldi	r30, 0x81	; 129
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8b 7f       	andi	r24, 0xFB	; 251
 112:	80 83       	st	Z, r24
 114:	80 81       	ld	r24, Z
 116:	83 60       	ori	r24, 0x03	; 3
 118:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 11a:	ef e6       	ldi	r30, 0x6F	; 111
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
	
	
    // Enables interrupts by setting the global interrupt mask
	sei();
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x36>

00000128 <__vector_16>:
/* Interrupt service routines ----------------------------------------*/


/*Timer 0*/
ISR(TIMER0_OVF_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	// WRITE YOUR CODE HERE
	static uint8_t position = 0;
	if (position == 0)
 14a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 14e:	81 11       	cpse	r24, r1
 150:	09 c0       	rjmp	.+18     	; 0x164 <__vector_16+0x3c>
	{
		SEG_update_shift_regs(singles, 0);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <singles>
 158:	0e 94 23 01 	call	0x246	; 0x246 <SEG_update_shift_regs>
		position= 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 162:	07 c0       	rjmp	.+14     	; 0x172 <__vector_16+0x4a>
	} 
	else
	{
		SEG_update_shift_regs(decimals, 1);
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16a:	0e 94 23 01 	call	0x246	; 0x246 <SEG_update_shift_regs>
		position= 0;
 16e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	}

}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
    // WRITE YOUR CODE HERE
	if (singles < 3)                                           
 1a2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <singles>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	60 f4       	brcc	.+24     	; 0x1c2 <__vector_13+0x2e>
	{
		singles++;
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <singles>
		decimals = 6;
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		next_loop++;
 1b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <next_loop>
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <next_loop>
 1c0:	2b c0       	rjmp	.+86     	; 0x218 <__vector_13+0x84>
	} 
	else
	{
		if (decimals == 6)             //ensuring second digit is off
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c6:	86 30       	cpi	r24, 0x06	; 6
 1c8:	61 f4       	brne	.+24     	; 0x1e2 <__vector_13+0x4e>
		{
			decimals = 2;              // if it is off then another rotating starts 
		}
		
		decimals++;                     // rotating of second digit
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		singles=6;                      // turning off first digit
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <singles>
		next_loop++;
 1d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <next_loop>
 1da:	8f 5f       	subi	r24, 0xFF	; 255
 1dc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <next_loop>
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <__vector_13+0x84>
		if (decimals == 6)             //ensuring second digit is off
		{
			decimals = 2;              // if it is off then another rotating starts 
		}
		
		decimals++;                     // rotating of second digit
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		singles=6;                      // turning off first digit
 1e8:	96 e0       	ldi	r25, 0x06	; 6
 1ea:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <singles>
		next_loop++;
 1ee:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <next_loop>
 1f2:	9f 5f       	subi	r25, 0xFF	; 255
 1f4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <next_loop>
		if (decimals==6)
 1f8:	86 30       	cpi	r24, 0x06	; 6
 1fa:	71 f4       	brne	.+28     	; 0x218 <__vector_13+0x84>
		{
			decimals=0;
			if (decimals == 0 && singles == 6 && next_loop == 8)
 1fc:	98 30       	cpi	r25, 0x08	; 8
 1fe:	39 f4       	brne	.+14     	; 0x20e <__vector_13+0x7a>
			{
				singles=0;
 200:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <singles>
				decimals=6;
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				next_loop=0;				
 208:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <next_loop>
 20c:	05 c0       	rjmp	.+10     	; 0x218 <__vector_13+0x84>
			} 
			else
			{
				singles=0;
 20e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <singles>
				decimals=6;
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
	
	}
	

}
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <SEG_init>:
	
/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	8a e2       	ldi	r24, 0x2A	; 42
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 230:	67 e0       	ldi	r22, 0x07	; 7
 232:	8a e2       	ldi	r24, 0x2A	; 42
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	84 e2       	ldi	r24, 0x24	; 36
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 244:	08 95       	ret

00000246 <SEG_update_shift_regs>:
	0b01000000,   // Position 2
	0b10000000};  // Position 3


void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
    uint8_t bit_number;
	segments = segment_value[segments];     // 0, 1, ..., 9
 24c:	e8 2f       	mov	r30, r24
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	eb 5f       	subi	r30, 0xFB	; 251
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 256:	e6 2f       	mov	r30, r22
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	ef 5f       	subi	r30, 0xFF	; 255
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	8b e2       	ldi	r24, 0x2B	; 43
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);
 26a:	67 e0       	ldi	r22, 0x07	; 7
 26c:	8b e2       	ldi	r24, 0x2B	; 43
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	85 e2       	ldi	r24, 0x25	; 37
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <SEG_update_shift_regs+0x3a>
 284:	00 00       	nop
 286:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "segments")
		if ((segments & 1) == 0)
 288:	10 fd       	sbrc	r17, 0
 28a:	06 c0       	rjmp	.+12     	; 0x298 <SEG_update_shift_regs+0x52>
		{
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	85 e2       	ldi	r24, 0x25	; 37
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <SEG_update_shift_regs+0x5c>
		}
		else
		{
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	85 e2       	ldi	r24, 0x25	; 37
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2a2:	85 e0       	ldi	r24, 0x05	; 5
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <SEG_update_shift_regs+0x5e>
 2a8:	00 00       	nop
		}
        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 2aa:	67 e0       	ldi	r22, 0x07	; 7
 2ac:	8b e2       	ldi	r24, 0x2B	; 43
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2b4:	85 e0       	ldi	r24, 0x05	; 5
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <SEG_update_shift_regs+0x70>
 2ba:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 2bc:	67 e0       	ldi	r22, 0x07	; 7
 2be:	8b e2       	ldi	r24, 0x2B	; 43
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 2c6:	16 95       	lsr	r17
 2c8:	c1 50       	subi	r28, 0x01	; 1
	GPIO_write_low(&PORTB, SEGMENT_DATA);
    // Wait 1 us
	_delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2ca:	f1 f6       	brne	.-68     	; 0x288 <SEG_update_shift_regs+0x42>
 2cc:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if ((position % 2) == 0)
 2ce:	d0 fd       	sbrc	r29, 0
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <SEG_update_shift_regs+0x98>
		{
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	85 e2       	ldi	r24, 0x25	; 37
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <SEG_update_shift_regs+0xa2>
		} 
		else
		{
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	85 e2       	ldi	r24, 0x25	; 37
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <SEG_update_shift_regs+0xa4>
 2ee:	00 00       	nop
		}
        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 2f0:	67 e0       	ldi	r22, 0x07	; 7
 2f2:	8b e2       	ldi	r24, 0x2B	; 43
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <SEG_update_shift_regs+0xb6>
 300:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 302:	67 e0       	ldi	r22, 0x07	; 7
 304:	8b e2       	ldi	r24, 0x2B	; 43
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 30c:	d6 95       	lsr	r29
 30e:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 310:	f1 f6       	brne	.-68     	; 0x2ce <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 312:	64 e0       	ldi	r22, 0x04	; 4
 314:	8b e2       	ldi	r24, 0x2B	; 43
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 31c:	85 e0       	ldi	r24, 0x05	; 5
 31e:	8a 95       	dec	r24
 320:	f1 f7       	brne	.-4      	; 0x31e <SEG_update_shift_regs+0xd8>
 322:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
