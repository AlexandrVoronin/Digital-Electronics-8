
07-uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800142  00800142  000006e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000170c  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adb  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b12  00000000  00000000  00002a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00003554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a2  00000000  00000000  00003800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b2a  00000000  00000000  00003da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_18>
  4c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_gotoxy>:
 118:	61 11       	cpse	r22, r1
 11a:	04 c0       	rjmp	.+8      	; 0x124 <lcd_gotoxy+0xc>
 11c:	80 58       	subi	r24, 0x80	; 128
 11e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 122:	08 95       	ret
 124:	80 54       	subi	r24, 0x40	; 64
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret

0000012c <lcd_clrscr>:
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_putc>:
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 13a:	08 95       	ret

0000013c <lcd_puts>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	fc 01       	movw	r30, r24
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	29 f0       	breq	.+10     	; 0x156 <lcd_puts+0x1a>
 14c:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_putc>
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	fb cf       	rjmp	.-10     	; 0x14c <lcd_puts+0x10>
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 160:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 162:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 164:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 166:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 168:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 16a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 16c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x16>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x1c>
 178:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 17a:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 17c:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 17e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 182:	81 ee       	ldi	r24, 0xE1	; 225
 184:	94 e0       	ldi	r25, 0x04	; 4
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x30>
 18c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_init+0x38>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	85 e1       	ldi	r24, 0x15	; 21
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_init+0x44>
 1a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1a6:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ac:	95 e1       	ldi	r25, 0x15	; 21
 1ae:	9a 95       	dec	r25
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_init+0x52>
 1b2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ca:	8c 2f       	mov	r24, r28
 1cc:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
}/* lcd_init */
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:
 * and UART.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_init>
    lcd_gotoxy(1, 0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
    lcd_puts("value:");
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(13,0);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	8d e0       	ldi	r24, 0x0D	; 13
 1ee:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("P:");
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
    lcd_gotoxy(3, 1);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
    lcd_puts("key:");
 202:	8a e0       	ldi	r24, 0x0A	; 10
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX &=~(1<<REFS1);
 20a:	ec e7       	ldi	r30, 0x7C	; 124
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8f 77       	andi	r24, 0x7F	; 127
 212:	80 83       	st	Z, r24
	ADMUX |=(1<<REFS0);
 214:	80 81       	ld	r24, Z
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 83       	st	Z, r24
    // Set input channet to ADC0
	ADMUX &=~((1<<MUX0) | (1<<MUX1) | (1<<MUX2) | (1<<MUX3));
 21a:	80 81       	ld	r24, Z
 21c:	80 7f       	andi	r24, 0xF0	; 240
 21e:	80 83       	st	Z, r24
    // Enable ADC module
	ADCSRA |= (1<<ADEN);
 220:	ea e7       	ldi	r30, 0x7A	; 122
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 68       	ori	r24, 0x80	; 128
 228:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
 22a:	80 81       	ld	r24, Z
 22c:	88 60       	ori	r24, 0x08	; 8
 22e:	80 83       	st	Z, r24
    // Set clock prescaler to 128
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 230:	80 81       	ld	r24, Z
 232:	87 60       	ori	r24, 0x07	; 7
 234:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_262ms();
 236:	e1 e8       	ldi	r30, 0x81	; 129
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	80 83       	st	Z, r24
 240:	80 81       	ld	r24, Z
 242:	83 60       	ori	r24, 0x03	; 3
 244:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 246:	ef e6       	ldi	r30, 0x6F	; 111
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	80 83       	st	Z, r24
    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 250:	87 e6       	ldi	r24, 0x67	; 103
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 94 02 	call	0x528	; 0x528 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 258:	78 94       	sei
 25a:	ff cf       	rjmp	.-2      	; 0x25a <main+0x86>

0000025c <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	8f 93       	push	r24
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	ADCSRA |= (1<<ADSC);
 26c:	ea e7       	ldi	r30, 0x7A	; 122
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 64       	ori	r24, 0x40	; 64
 274:	80 83       	st	Z, r24
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	8f 91       	pop	r24
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <__vector_21>:
/**
 * ISR starts when ADC complets the convertion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	25 97       	sbiw	r28, 0x05	; 5
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	cd bf       	out	0x3d, r28	; 61
	uint16_t value;
	char lcd_string[5];						//string for sending data to LCD
	value=ADC;
 2ba:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2be:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	be 01       	movw	r22, r28
 2c6:	6f 5f       	subi	r22, 0xFF	; 255
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	c8 01       	movw	r24, r16
 2cc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__itoa_ncheck>
	int bit_value[16];						//converted value to binary
	uint16_t i;								//used in if for incrementing
	uint16_t x=0;							//used to decide if parity must be 1 or 0
	
	itoa(value, lcd_string, 10);			//sets cursor and string			
	lcd_gotoxy(8, 0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("    ");
 2d8:	8e e1       	ldi	r24, 0x1E	; 30
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	lcd_gotoxy(8, 0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts(lcd_string);
 2e8:	ce 01       	movw	r24, r28
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	
	if(value<700)							//reduction of statements in console
 2f0:	0c 3b       	cpi	r16, 0xBC	; 188
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	18 07       	cpc	r17, r24
 2f6:	60 f4       	brcc	.+24     	; 0x310 <__vector_21+0x8a>
	{
		uart_puts("ADC value");				//sets console
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 c2 02 	call	0x584	; 0x584 <uart_puts>
		uart_puts(lcd_string);				//writes down value
 300:	ce 01       	movw	r24, r28
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	0e 94 c2 02 	call	0x584	; 0x584 <uart_puts>
		uart_puts("\n");
 308:	89 e1       	ldi	r24, 0x19	; 25
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 c2 02 	call	0x584	; 0x584 <uart_puts>
	}
	

	
	//Identification of pressed button
	lcd_gotoxy(8, 1);						//sets cursor
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
	lcd_puts("       ");					//clearing previous identification
 318:	8b e1       	ldi	r24, 0x1B	; 27
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
	if (value >= 1020)						//reduction of statements in console 
 320:	0c 3f       	cpi	r16, 0xFC	; 252
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	18 07       	cpc	r17, r24
 326:	68 f0       	brcs	.+26     	; 0x342 <__vector_21+0xbc>
	{
		lcd_gotoxy(8, 1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	88 e0       	ldi	r24, 0x08	; 8
 32c:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("None");					//no button is pushed
 330:	83 e2       	ldi	r24, 0x23	; 35
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>



	//Odd parity program

	for(i=0;value>0;i++)					//converting decimal value to binary
 338:	01 15       	cp	r16, r1
 33a:	11 05       	cpc	r17, r1
 33c:	09 f0       	breq	.+2      	; 0x340 <__vector_21+0xba>
 33e:	46 c0       	rjmp	.+140    	; 0x3cc <__vector_21+0x146>
 340:	50 c0       	rjmp	.+160    	; 0x3e2 <__vector_21+0x15c>
	if (value >= 1020)						//reduction of statements in console 
	{
		lcd_gotoxy(8, 1);
		lcd_puts("None");					//no button is pushed
	}
	else if (value>=0 && value< 10)			//identifying pushed right button
 342:	0a 30       	cpi	r16, 0x0A	; 10
 344:	11 05       	cpc	r17, r1
 346:	48 f4       	brcc	.+18     	; 0x35a <__vector_21+0xd4>
	{
		lcd_gotoxy(8, 1);
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	88 e0       	ldi	r24, 0x08	; 8
 34c:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Right");
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 358:	ef cf       	rjmp	.-34     	; 0x338 <__vector_21+0xb2>
	}
	else if (value>90 && value< 110)		//identifying pushed up button
 35a:	c8 01       	movw	r24, r16
 35c:	8b 55       	subi	r24, 0x5B	; 91
 35e:	91 09       	sbc	r25, r1
 360:	43 97       	sbiw	r24, 0x13	; 19
 362:	48 f4       	brcc	.+18     	; 0x376 <__vector_21+0xf0>
	{
		lcd_gotoxy(8, 1);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	88 e0       	ldi	r24, 0x08	; 8
 368:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Up");
 36c:	8e e2       	ldi	r24, 0x2E	; 46
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 374:	e1 cf       	rjmp	.-62     	; 0x338 <__vector_21+0xb2>
	}
	else if (value>230 && value< 250)		//identifying pushed down button
 376:	c8 01       	movw	r24, r16
 378:	87 5e       	subi	r24, 0xE7	; 231
 37a:	91 09       	sbc	r25, r1
 37c:	43 97       	sbiw	r24, 0x13	; 19
 37e:	48 f4       	brcc	.+18     	; 0x392 <__vector_21+0x10c>
	{
		lcd_gotoxy(8, 1);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	88 e0       	ldi	r24, 0x08	; 8
 384:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Down");
 388:	81 e3       	ldi	r24, 0x31	; 49
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 390:	d3 cf       	rjmp	.-90     	; 0x338 <__vector_21+0xb2>
	}
	else if (value>390 && value< 410)		//identifying pushed left button
 392:	c8 01       	movw	r24, r16
 394:	87 58       	subi	r24, 0x87	; 135
 396:	91 40       	sbci	r25, 0x01	; 1
 398:	43 97       	sbiw	r24, 0x13	; 19
 39a:	48 f4       	brcc	.+18     	; 0x3ae <__vector_21+0x128>
	{
		lcd_gotoxy(8, 1);
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	88 e0       	ldi	r24, 0x08	; 8
 3a0:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Left");
 3a4:	86 e3       	ldi	r24, 0x36	; 54
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 3ac:	c5 cf       	rjmp	.-118    	; 0x338 <__vector_21+0xb2>
	}
	else if (value>640 && value< 660)		//identifying pushed select button
 3ae:	c8 01       	movw	r24, r16
 3b0:	81 58       	subi	r24, 0x81	; 129
 3b2:	92 40       	sbci	r25, 0x02	; 2
 3b4:	43 97       	sbiw	r24, 0x13	; 19
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <__vector_21+0x134>
 3b8:	bf cf       	rjmp	.-130    	; 0x338 <__vector_21+0xb2>
	{
		lcd_gotoxy(8, 1);
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	88 e0       	ldi	r24, 0x08	; 8
 3be:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("Select");
 3c2:	8b e3       	ldi	r24, 0x3B	; 59
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 3ca:	b6 cf       	rjmp	.-148    	; 0x338 <__vector_21+0xb2>



	//Odd parity program

	for(i=0;value>0;i++)					//converting decimal value to binary
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
	{
		bit_value[i]=value%2;				//modulo for one bit
		if ((bit_value[i]%2) == 1)			
 3d0:	00 fd       	sbrc	r16, 0
		{
			x++;							//incrementing ones
 3d2:	01 96       	adiw	r24, 0x01	; 1
		}
		value=value/2;
 3d4:	16 95       	lsr	r17
 3d6:	07 95       	ror	r16



	//Odd parity program

	for(i=0;value>0;i++)					//converting decimal value to binary
 3d8:	01 15       	cp	r16, r1
 3da:	11 05       	cpc	r17, r1
 3dc:	c9 f7       	brne	.-14     	; 0x3d0 <__vector_21+0x14a>
			x++;							//incrementing ones
		}
		value=value/2;
	}
	
	if (x%2==0)								//if number of ones is even parity is 1
 3de:	80 fd       	sbrc	r24, 0
 3e0:	19 c0       	rjmp	.+50     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e2:	4a e0       	ldi	r20, 0x0A	; 10
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__itoa_ncheck>
	{
		itoa(1, lcd_string, 10);
		lcd_gotoxy(15, 0);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	8f e0       	ldi	r24, 0x0F	; 15
 3f6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("    ");
 3fa:	8e e1       	ldi	r24, 0x1E	; 30
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(15, 0);
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts(lcd_string);
 40a:	ce 01       	movw	r24, r28
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
 412:	18 c0       	rjmp	.+48     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 414:	4a e0       	ldi	r20, 0x0A	; 10
 416:	be 01       	movw	r22, r28
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__itoa_ncheck>
	} 
	else
	{
		itoa(0, lcd_string, 10);
		lcd_gotoxy(15, 0);
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	8f e0       	ldi	r24, 0x0F	; 15
 428:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts("    ");
 42c:	8e e1       	ldi	r24, 0x1E	; 30
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>
		lcd_gotoxy(15, 0);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	8f e0       	ldi	r24, 0x0F	; 15
 438:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_gotoxy>
		lcd_puts(lcd_string);
 43c:	ce 01       	movw	r24, r28
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_puts>

	x=0;

	
	
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
 48c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 490:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 494:	8c 71       	andi	r24, 0x1C	; 28
 496:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 49a:	ef 5f       	subi	r30, 0xFF	; 255
 49c:	ef 71       	andi	r30, 0x1F	; 31
 49e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 4a2:	e9 17       	cp	r30, r25
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <__vector_18+0x3c>
 4a6:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	e9 5b       	subi	r30, 0xB9	; 185
 4ae:	fe 4f       	sbci	r31, 0xFE	; 254
 4b0:	20 83       	st	Z, r18
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <__vector_18+0x3e>
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__data_end>
 4ba:	89 2b       	or	r24, r25
 4bc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <__vector_19>:
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
 4e6:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 4ea:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 4ee:	98 17       	cp	r25, r24
 4f0:	69 f0       	breq	.+26     	; 0x50c <__vector_19+0x38>
 4f2:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 4f6:	ef 5f       	subi	r30, 0xFF	; 255
 4f8:	ef 71       	andi	r30, 0x1F	; 31
 4fa:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	e9 59       	subi	r30, 0x99	; 153
 502:	fe 4f       	sbci	r31, 0xFE	; 254
 504:	80 81       	ld	r24, Z
 506:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 50a:	05 c0       	rjmp	.+10     	; 0x516 <__vector_19+0x42>
 50c:	e1 ec       	ldi	r30, 0xC1	; 193
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	8f 7d       	andi	r24, 0xDF	; 223
 514:	80 83       	st	Z, r24
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <uart_init>:
 528:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
 52c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
 530:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
 534:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
 538:	99 23       	and	r25, r25
 53a:	1c f4       	brge	.+6      	; 0x542 <uart_init+0x1a>
 53c:	22 e0       	ldi	r18, 0x02	; 2
 53e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 542:	90 78       	andi	r25, 0x80	; 128
 544:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 548:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 54c:	88 e9       	ldi	r24, 0x98	; 152
 54e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 552:	86 e0       	ldi	r24, 0x06	; 6
 554:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 558:	08 95       	ret

0000055a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 55a:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <UART_TxHead>
 55e:	2f 5f       	subi	r18, 0xFF	; 255
 560:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 562:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_TxTail>
 566:	29 17       	cp	r18, r25
 568:	e1 f3       	breq	.-8      	; 0x562 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 56a:	e2 2f       	mov	r30, r18
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	e9 59       	subi	r30, 0x99	; 153
 570:	fe 4f       	sbci	r31, 0xFE	; 254
 572:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 574:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 578:	e1 ec       	ldi	r30, 0xC1	; 193
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	80 62       	ori	r24, 0x20	; 32
 580:	80 83       	st	Z, r24
 582:	08 95       	ret

00000584 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	ec 01       	movw	r28, r24
    while (*s)
 58a:	88 81       	ld	r24, Y
 58c:	88 23       	and	r24, r24
 58e:	31 f0       	breq	.+12     	; 0x59c <uart_puts+0x18>
 590:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 592:	0e 94 ad 02 	call	0x55a	; 0x55a <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 596:	89 91       	ld	r24, Y+
 598:	81 11       	cpse	r24, r1
 59a:	fb cf       	rjmp	.-10     	; 0x592 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <__itoa_ncheck>:
 5a2:	bb 27       	eor	r27, r27
 5a4:	4a 30       	cpi	r20, 0x0A	; 10
 5a6:	31 f4       	brne	.+12     	; 0x5b4 <__itoa_ncheck+0x12>
 5a8:	99 23       	and	r25, r25
 5aa:	22 f4       	brpl	.+8      	; 0x5b4 <__itoa_ncheck+0x12>
 5ac:	bd e2       	ldi	r27, 0x2D	; 45
 5ae:	90 95       	com	r25
 5b0:	81 95       	neg	r24
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__utoa_common>

000005b8 <__utoa_ncheck>:
 5b8:	bb 27       	eor	r27, r27

000005ba <__utoa_common>:
 5ba:	fb 01       	movw	r30, r22
 5bc:	55 27       	eor	r21, r21
 5be:	aa 27       	eor	r26, r26
 5c0:	88 0f       	add	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	aa 1f       	adc	r26, r26
 5c6:	a4 17       	cp	r26, r20
 5c8:	10 f0       	brcs	.+4      	; 0x5ce <__utoa_common+0x14>
 5ca:	a4 1b       	sub	r26, r20
 5cc:	83 95       	inc	r24
 5ce:	50 51       	subi	r21, 0x10	; 16
 5d0:	b9 f7       	brne	.-18     	; 0x5c0 <__utoa_common+0x6>
 5d2:	a0 5d       	subi	r26, 0xD0	; 208
 5d4:	aa 33       	cpi	r26, 0x3A	; 58
 5d6:	08 f0       	brcs	.+2      	; 0x5da <__utoa_common+0x20>
 5d8:	a9 5d       	subi	r26, 0xD9	; 217
 5da:	a1 93       	st	Z+, r26
 5dc:	00 97       	sbiw	r24, 0x00	; 0
 5de:	79 f7       	brne	.-34     	; 0x5be <__utoa_common+0x4>
 5e0:	b1 11       	cpse	r27, r1
 5e2:	b1 93       	st	Z+, r27
 5e4:	11 92       	st	Z+, r1
 5e6:	cb 01       	movw	r24, r22
 5e8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <strrev>

000005ec <strrev>:
 5ec:	dc 01       	movw	r26, r24
 5ee:	fc 01       	movw	r30, r24
 5f0:	67 2f       	mov	r22, r23
 5f2:	71 91       	ld	r23, Z+
 5f4:	77 23       	and	r23, r23
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <strrev+0x4>
 5f8:	32 97       	sbiw	r30, 0x02	; 2
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <strrev+0x18>
 5fc:	7c 91       	ld	r23, X
 5fe:	6d 93       	st	X+, r22
 600:	70 83       	st	Z, r23
 602:	62 91       	ld	r22, -Z
 604:	ae 17       	cp	r26, r30
 606:	bf 07       	cpc	r27, r31
 608:	c8 f3       	brcs	.-14     	; 0x5fc <strrev+0x10>
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
