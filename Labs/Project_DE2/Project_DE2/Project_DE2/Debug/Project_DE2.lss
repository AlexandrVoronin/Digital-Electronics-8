
Project_DE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000d02  00000d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  0080012e  0080012e  00000dc4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002169  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c48  00000000  00000000  00003135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fad  00000000  00000000  00003d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00004d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000754  00000000  00000000  00005194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fac  00000000  00000000  000058e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006894  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_1>
   8:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_18>
  4c:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 37       	cpi	r26, 0x79	; 121
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  9e:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	81 81       	ldd	r24, Z+1	; 0x01
  da:	28 23       	and	r18, r24
  dc:	21 83       	std	Z+1, r18	; 0x01
  de:	08 95       	ret

000000e0 <GPIO_write_low>:
  e0:	fc 01       	movw	r30, r24
  e2:	90 81       	ld	r25, Z
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
  f2:	20 95       	com	r18
  f4:	29 23       	and	r18, r25
  f6:	20 83       	st	Z, r18
  f8:	08 95       	ret

000000fa <GPIO_write_high>:
  fa:	fc 01       	movw	r30, r24
  fc:	40 81       	ld	r20, Z
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
 104:	22 0f       	add	r18, r18
 106:	33 1f       	adc	r19, r19
 108:	6a 95       	dec	r22
 10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
 10c:	24 2b       	or	r18, r20
 10e:	20 83       	st	Z, r18
 110:	08 95       	ret

00000112 <GPIO_toggle>:
 112:	fc 01       	movw	r30, r24
 114:	40 81       	ld	r20, Z
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
 124:	24 27       	eor	r18, r20
 126:	20 83       	st	Z, r18
 128:	08 95       	ret

0000012a <GPIO_read>:
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_read+0xc>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_read+0x8>
 13a:	81 70       	andi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <toggle_e>:
 13e:	29 9a       	sbi	0x05, 1	; 5
 140:	00 00       	nop
 142:	29 98       	cbi	0x05, 1	; 5
 144:	08 95       	ret

00000146 <lcd_write>:
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
 14a:	66 23       	and	r22, r22
 14c:	11 f0       	breq	.+4      	; 0x152 <lcd_write+0xc>
 14e:	28 9a       	sbi	0x05, 0	; 5
 150:	01 c0       	rjmp	.+2      	; 0x154 <lcd_write+0xe>
 152:	28 98       	cbi	0x05, 0	; 5
 154:	54 9a       	sbi	0x0a, 4	; 10
 156:	55 9a       	sbi	0x0a, 5	; 10
 158:	56 9a       	sbi	0x0a, 6	; 10
 15a:	57 9a       	sbi	0x0a, 7	; 10
 15c:	5f 98       	cbi	0x0b, 7	; 11
 15e:	5e 98       	cbi	0x0b, 6	; 11
 160:	5d 98       	cbi	0x0b, 5	; 11
 162:	5c 98       	cbi	0x0b, 4	; 11
 164:	cc 23       	and	r28, r28
 166:	0c f4       	brge	.+2      	; 0x16a <lcd_write+0x24>
 168:	5f 9a       	sbi	0x0b, 7	; 11
 16a:	c6 fd       	sbrc	r28, 6
 16c:	5e 9a       	sbi	0x0b, 6	; 11
 16e:	c5 fd       	sbrc	r28, 5
 170:	5d 9a       	sbi	0x0b, 5	; 11
 172:	c4 fd       	sbrc	r28, 4
 174:	5c 9a       	sbi	0x0b, 4	; 11
 176:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 17a:	5f 98       	cbi	0x0b, 7	; 11
 17c:	5e 98       	cbi	0x0b, 6	; 11
 17e:	5d 98       	cbi	0x0b, 5	; 11
 180:	5c 98       	cbi	0x0b, 4	; 11
 182:	c3 fd       	sbrc	r28, 3
 184:	5f 9a       	sbi	0x0b, 7	; 11
 186:	c2 fd       	sbrc	r28, 2
 188:	5e 9a       	sbi	0x0b, 6	; 11
 18a:	c1 fd       	sbrc	r28, 1
 18c:	5d 9a       	sbi	0x0b, 5	; 11
 18e:	c0 fd       	sbrc	r28, 0
 190:	5c 9a       	sbi	0x0b, 4	; 11
 192:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 196:	5c 9a       	sbi	0x0b, 4	; 11
 198:	5d 9a       	sbi	0x0b, 5	; 11
 19a:	5e 9a       	sbi	0x0b, 6	; 11
 19c:	5f 9a       	sbi	0x0b, 7	; 11
 19e:	8a ef       	ldi	r24, 0xFA	; 250
 1a0:	8a 95       	dec	r24
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_write+0x5a>
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <lcd_command>:
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_write>
 1ae:	08 95       	ret

000001b0 <lcd_gotoxy>:
 1b0:	61 11       	cpse	r22, r1
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <lcd_gotoxy+0xc>
 1b4:	80 58       	subi	r24, 0x80	; 128
 1b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_command>
 1ba:	08 95       	ret
 1bc:	80 54       	subi	r24, 0x40	; 64
 1be:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_command>
 1c2:	08 95       	ret

000001c4 <lcd_clrscr>:
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_command>
 1ca:	08 95       	ret

000001cc <lcd_putc>:
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_write>
 1d2:	08 95       	ret

000001d4 <lcd_puts>:
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
 1da:	21 96       	adiw	r28, 0x01	; 1
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	29 f0       	breq	.+10     	; 0x1ee <lcd_puts+0x1a>
 1e4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_putc>
 1e8:	89 91       	ld	r24, Y+
 1ea:	81 11       	cpse	r24, r1
 1ec:	fb cf       	rjmp	.-10     	; 0x1e4 <lcd_puts+0x10>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <lcd_init>:
 1f4:	cf 93       	push	r28
 1f6:	c8 2f       	mov	r28, r24
 1f8:	20 9a       	sbi	0x04, 0	; 4
 1fa:	55 9a       	sbi	0x0a, 5	; 10
 1fc:	21 9a       	sbi	0x04, 1	; 4
 1fe:	54 9a       	sbi	0x0a, 4	; 10
 200:	55 9a       	sbi	0x0a, 5	; 10
 202:	56 9a       	sbi	0x0a, 6	; 10
 204:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_init+0x16>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd_init+0x1c>
 210:	00 00       	nop
 212:	5d 9a       	sbi	0x0b, 5	; 11
 214:	5c 9a       	sbi	0x0b, 4	; 11
 216:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 21a:	81 ee       	ldi	r24, 0xE1	; 225
 21c:	94 e0       	ldi	r25, 0x04	; 4
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x2a>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x30>
 224:	00 00       	nop
 226:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 22a:	95 e1       	ldi	r25, 0x15	; 21
 22c:	9a 95       	dec	r25
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_init+0x38>
 230:	00 00       	nop
 232:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 236:	85 e1       	ldi	r24, 0x15	; 21
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x44>
 23c:	00 00       	nop
 23e:	5c 98       	cbi	0x0b, 4	; 11
 240:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
 244:	95 e1       	ldi	r25, 0x15	; 21
 246:	9a 95       	dec	r25
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x52>
 24a:	00 00       	nop
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_command>
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_command>
 258:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_clrscr>
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_command>
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_command>
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <main>:
int L_global=100;		// distance for left sensor as a global variable
int R_global=100;		// distance for right sensor as a global variable

int main(void)
{
	lcd_init(LCD_DISP_ON);	
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_init>
	
	GPIO_config_output(&DDRB, trigPinL);		// set pin trigPinL as output
 272:	64 e0       	ldi	r22, 0x04	; 4
 274:	84 e2       	ldi	r24, 0x24	; 36
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_input_nopull(&DDRD,echoPinL);	// set pin echoPinL as input
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	8a e2       	ldi	r24, 0x2A	; 42
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	
	GPIO_config_output(&DDRB, trigPinR);		// set pin trigPinR as output
 286:	65 e0       	ldi	r22, 0x05	; 5
 288:	84 e2       	ldi	r24, 0x24	; 36
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_input_nopull(&DDRD,echoPinR);	// set pin echoPinR as input
 290:	63 e0       	ldi	r22, 0x03	; 3
 292:	8a e2       	ldi	r24, 0x2A	; 42
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	
	GPIO_config_output(&DDRB, sound);			// set pin sound as output
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	84 e2       	ldi	r24, 0x24	; 36
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB,sound);				// set pin sound to low 
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	85 e2       	ldi	r24, 0x25	; 37
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		
	LED_out();									// set all LED pins as output
 2ae:	0e 94 0c 04 	call	0x818	; 0x818 <LED_out>
	
	LED_off();									// set all LED pins to low 
 2b2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LED_off>
		
	EIMSK |= (1<<INT0);							// Set up pin change interrupt INT0
 2b6:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= ((1<<ISC00) | (1<<ISC01));
 2b8:	e9 e6       	ldi	r30, 0x69	; 105
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	83 60       	ori	r24, 0x03	; 3
 2c0:	80 83       	st	Z, r24
	
	EIMSK |= (1<<INT1);							// Set up pin change interrupt INT1
 2c2:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= ((1<<ISC10) | (1<<ISC11));
 2c4:	80 81       	ld	r24, Z
 2c6:	8c 60       	ori	r24, 0x0C	; 12
 2c8:	80 83       	st	Z, r24
	
	lcd_gotoxy(0,0);							// Preset LCD dispaly
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
	lcd_puts("L:");
 2d2:	8c e0       	ldi	r24, 0x0C	; 12
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
	
	lcd_gotoxy(0,1);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
	lcd_puts("R:");
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
	
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 2ea:	87 e6       	ldi	r24, 0x67	; 103
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 de 04 	call	0x9bc	; 0x9bc <uart_init>
		
	TIM1_overflow_1s();							// Set up Timers 1, 2  
 2f2:	e1 e8       	ldi	r30, 0x81	; 129
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8c 7f       	andi	r24, 0xFC	; 252
 2fa:	80 83       	st	Z, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 302:	ef e6       	ldi	r30, 0x6F	; 111
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 83       	st	Z, r24
		
	TIM2_overflow_16384us();
 30c:	e1 eb       	ldi	r30, 0xB1	; 177
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	87 60       	ori	r24, 0x07	; 7
 314:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 316:	e0 e7       	ldi	r30, 0x70	; 112
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	80 83       	st	Z, r24
			
	sei();	
 320:	78 94       	sei
 322:	ff cf       	rjmp	.-2      	; 0x322 <main+0xb6>

00000324 <__vector_13>:
    {		
    }
}

ISR(TIMER1_OVF_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	4f 93       	push	r20
 334:	5f 93       	push	r21
 336:	6f 93       	push	r22
 338:	7f 93       	push	r23
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	static int pulse_switch = 0;	
	if(pulse_switch == 0)
 346:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <pulse_switch.2124>
 34a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <pulse_switch.2124+0x1>
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	f1 f4       	brne	.+60     	; 0x38e <__vector_13+0x6a>
	{
		GPIO_write_low(&PORTB,trigPinL);		// transmit 10 us pulse on pin trigPinL
 352:	64 e0       	ldi	r22, 0x04	; 4
 354:	85 e2       	ldi	r24, 0x25	; 37
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 35c:	85 e0       	ldi	r24, 0x05	; 5
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <__vector_13+0x3a>
 362:	00 00       	nop
		_delay_us(1);
		GPIO_write_high(&PORTB,trigPinL);
 364:	64 e0       	ldi	r22, 0x04	; 4
 366:	85 e2       	ldi	r24, 0x25	; 37
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 36e:	85 e3       	ldi	r24, 0x35	; 53
 370:	8a 95       	dec	r24
 372:	f1 f7       	brne	.-4      	; 0x370 <__vector_13+0x4c>
 374:	00 00       	nop
		_delay_us(10);
		GPIO_write_low(&PORTB,trigPinL);
 376:	64 e0       	ldi	r22, 0x04	; 4
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		pulse_switch = 1; 
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <pulse_switch.2124+0x1>
 388:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pulse_switch.2124>
 38c:	1d c0       	rjmp	.+58     	; 0x3c8 <__vector_13+0xa4>
	}
	else if(pulse_switch == 1)
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	d9 f4       	brne	.+54     	; 0x3c8 <__vector_13+0xa4>
	{
		GPIO_write_low(&PORTB,trigPinR);		// transmit 10 us pulse on pin trigPinR
 392:	65 e0       	ldi	r22, 0x05	; 5
 394:	85 e2       	ldi	r24, 0x25	; 37
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 39c:	85 e0       	ldi	r24, 0x05	; 5
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <__vector_13+0x7a>
 3a2:	00 00       	nop
		_delay_us(1);
		GPIO_write_high(&PORTB,trigPinR);
 3a4:	65 e0       	ldi	r22, 0x05	; 5
 3a6:	85 e2       	ldi	r24, 0x25	; 37
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
 3ae:	85 e3       	ldi	r24, 0x35	; 53
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <__vector_13+0x8c>
 3b4:	00 00       	nop
		_delay_us(10);
		GPIO_write_low(&PORTB,trigPinR);
 3b6:	65 e0       	ldi	r22, 0x05	; 5
 3b8:	85 e2       	ldi	r24, 0x25	; 37
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		pulse_switch= 0;
 3c0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <pulse_switch.2124+0x1>
 3c4:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <pulse_switch.2124>
	}
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_1>:

ISR(INT0_vect)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	28 97       	sbiw	r28, 0x08	; 8
 416:	de bf       	out	0x3e, r29	; 62
 418:	cd bf       	out	0x3d, r28	; 61
	static uint16_t counterL=0;
	char stringL[8]="      ";
 41a:	87 e0       	ldi	r24, 0x07	; 7
 41c:	e4 e0       	ldi	r30, 0x04	; 4
 41e:	f1 e0       	ldi	r31, 0x01	; 1
 420:	de 01       	movw	r26, r28
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	01 90       	ld	r0, Z+
 426:	0d 92       	st	X+, r0
 428:	8a 95       	dec	r24
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	18 86       	std	Y+8, r1	; 0x08
	while(GPIO_read(&PIND,echoPinL))			// measuring pulse width 
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{		
		counterL++;
 430:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <counterL.2130>
 434:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <counterL.2130+0x1>
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <counterL.2130+0x1>
 43e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <counterL.2130>

ISR(INT0_vect)
{
	static uint16_t counterL=0;
	char stringL[8]="      ";
	while(GPIO_read(&PIND,echoPinL))			// measuring pulse width 
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	89 e2       	ldi	r24, 0x29	; 41
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 44c:	81 11       	cpse	r24, r1
 44e:	f0 cf       	rjmp	.-32     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{		
		counterL++;
	}	
 	counterL=counterL/21.55;					// calculation of distance
 450:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <counterL.2130>
 454:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <counterL.2130+0x1>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 bc 05 	call	0xb78	; 0xb78 <__floatunsisf>
 460:	26 e6       	ldi	r18, 0x66	; 102
 462:	36 e6       	ldi	r19, 0x66	; 102
 464:	4c ea       	ldi	r20, 0xAC	; 172
 466:	51 e4       	ldi	r21, 0x41	; 65
 468:	0e 94 1b 05 	call	0xa36	; 0xa36 <__divsf3>
 46c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fixunssfsi>
 470:	dc 01       	movw	r26, r24
 472:	cb 01       	movw	r24, r22
 474:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <counterL.2130+0x1>
 478:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <counterL.2130>
	if (counterL <= 2 || counterL >=400 )		// range of sensor
 47c:	9c 01       	movw	r18, r24
 47e:	23 50       	subi	r18, 0x03	; 3
 480:	31 09       	sbc	r19, r1
 482:	2d 38       	cpi	r18, 0x8D	; 141
 484:	31 40       	sbci	r19, 0x01	; 1
 486:	a8 f0       	brcs	.+42     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	{
		uart_puts("N/A \n");					// send data to LCD display and UART
 488:	82 e1       	ldi	r24, 0x12	; 18
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
		lcd_gotoxy(2,0);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	82 e0       	ldi	r24, 0x02	; 2
 494:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
		lcd_puts("    ");
 498:	88 e1       	ldi	r24, 0x18	; 24
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
		lcd_gotoxy(2,0);
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
		lcd_puts("N/A");
 4a8:	8d e1       	ldi	r24, 0x1D	; 29
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
 4b0:	22 c0       	rjmp	.+68     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4b2:	4a e0       	ldi	r20, 0x0A	; 10
 4b4:	be 01       	movw	r22, r28
 4b6:	6f 5f       	subi	r22, 0xFF	; 255
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	0e 94 4a 06 	call	0xc94	; 0xc94 <__itoa_ncheck>
	}
	else
	{
		itoa(counterL,stringL,10);				// send data to LCD display and UART
		lcd_gotoxy(2,0);
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
		lcd_puts("    ");
 4c6:	88 e1       	ldi	r24, 0x18	; 24
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
		lcd_gotoxy(2,0);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
		lcd_puts(stringL);
 4d6:	ce 01       	movw	r24, r28
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
		uart_puts("Left:");
 4de:	81 e2       	ldi	r24, 0x21	; 33
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
		uart_puts(stringL);
 4e6:	ce 01       	movw	r24, r28
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
		uart_puts("\n");
 4ee:	86 e1       	ldi	r24, 0x16	; 22
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
	}
	L_global=counterL;
 4f6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <counterL.2130>
 4fa:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <counterL.2130+0x1>
 4fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <L_global+0x1>
 502:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <L_global>
	counterL = 0;								// reset counter for new process	
 506:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <counterL.2130+0x1>
 50a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <counterL.2130>
}
 50e:	28 96       	adiw	r28, 0x08	; 8
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <__vector_2>:

ISR(INT1_vect)
{
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	4f 93       	push	r20
 550:	5f 93       	push	r21
 552:	6f 93       	push	r22
 554:	7f 93       	push	r23
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	28 97       	sbiw	r28, 0x08	; 8
 56c:	de bf       	out	0x3e, r29	; 62
 56e:	cd bf       	out	0x3d, r28	; 61
	static uint16_t counterR=0;
	char stringR[8]="      ";	
 570:	87 e0       	ldi	r24, 0x07	; 7
 572:	e4 e0       	ldi	r30, 0x04	; 4
 574:	f1 e0       	ldi	r31, 0x01	; 1
 576:	de 01       	movw	r26, r28
 578:	11 96       	adiw	r26, 0x01	; 1
 57a:	01 90       	ld	r0, Z+
 57c:	0d 92       	st	X+, r0
 57e:	8a 95       	dec	r24
 580:	e1 f7       	brne	.-8      	; 0x57a <__vector_2+0x3a>
 582:	18 86       	std	Y+8, r1	; 0x08
	while(GPIO_read(&PIND,echoPinR))			// measuring pulse width
 584:	09 c0       	rjmp	.+18     	; 0x598 <__vector_2+0x58>
	{		
		counterR++;
 586:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 58a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 58e:	01 96       	adiw	r24, 0x01	; 1
 590:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 594:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>

ISR(INT1_vect)
{
	static uint16_t counterR=0;
	char stringR[8]="      ";	
	while(GPIO_read(&PIND,echoPinR))			// measuring pulse width
 598:	63 e0       	ldi	r22, 0x03	; 3
 59a:	89 e2       	ldi	r24, 0x29	; 41
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
 5a2:	81 11       	cpse	r24, r1
 5a4:	f0 cf       	rjmp	.-32     	; 0x586 <__vector_2+0x46>
	{		
		counterR++;
	}	
 	counterR=counterR/19.3;						// calculation of distance
 5a6:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <__data_end>
 5aa:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <__data_end+0x1>
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 bc 05 	call	0xb78	; 0xb78 <__floatunsisf>
 5b6:	26 e6       	ldi	r18, 0x66	; 102
 5b8:	36 e6       	ldi	r19, 0x66	; 102
 5ba:	4a e9       	ldi	r20, 0x9A	; 154
 5bc:	51 e4       	ldi	r21, 0x41	; 65
 5be:	0e 94 1b 05 	call	0xa36	; 0xa36 <__divsf3>
 5c2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fixunssfsi>
 5c6:	dc 01       	movw	r26, r24
 5c8:	cb 01       	movw	r24, r22
 5ca:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 5ce:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	
 	if (counterR <= 2 || counterR >=400 )		// range of sensor
 5d2:	9c 01       	movw	r18, r24
 5d4:	23 50       	subi	r18, 0x03	; 3
 5d6:	31 09       	sbc	r19, r1
 5d8:	2d 38       	cpi	r18, 0x8D	; 141
 5da:	31 40       	sbci	r19, 0x01	; 1
 5dc:	a8 f0       	brcs	.+42     	; 0x608 <__vector_2+0xc8>
 	{
 		uart_puts("N/A \n");					// send data to LCD display and UART
 5de:	82 e1       	ldi	r24, 0x12	; 18
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
		lcd_gotoxy(2,1);
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
		lcd_puts("    ");
 5ee:	88 e1       	ldi	r24, 0x18	; 24
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
		lcd_gotoxy(2,1);
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
		lcd_puts("N/A");
 5fe:	8d e1       	ldi	r24, 0x1D	; 29
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
 606:	22 c0       	rjmp	.+68     	; 0x64c <__vector_2+0x10c>
 608:	4a e0       	ldi	r20, 0x0A	; 10
 60a:	be 01       	movw	r22, r28
 60c:	6f 5f       	subi	r22, 0xFF	; 255
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	0e 94 4a 06 	call	0xc94	; 0xc94 <__itoa_ncheck>
 	}
 	else
 	{
		itoa(counterR,stringR,10);				// send data to LCD display and UART
		lcd_gotoxy(2,1);
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
		lcd_puts("    ");
 61c:	88 e1       	ldi	r24, 0x18	; 24
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
		lcd_gotoxy(2,1);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	82 e0       	ldi	r24, 0x02	; 2
 628:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_gotoxy>
		lcd_puts(stringR);
 62c:	ce 01       	movw	r24, r28
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_puts>
		uart_puts("Right:");
 634:	87 e2       	ldi	r24, 0x27	; 39
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
		uart_puts(stringR);
 63c:	ce 01       	movw	r24, r28
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
		uart_puts("\n");
 644:	86 e1       	ldi	r24, 0x16	; 22
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 0c 05 	call	0xa18	; 0xa18 <uart_puts>
	}
	R_global=counterR;
 64c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 650:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 654:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <R_global+0x1>
 658:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <R_global>
	counterR = 0;								// reset counter for new process
 65c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x1>
 660:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	
	LED_off();									// every interrupt turns off LED 
 664:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LED_off>
}
 668:	28 96       	adiw	r28, 0x08	; 8
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	de bf       	out	0x3e, r29	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	cd bf       	out	0x3d, r28	; 61
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	ff 91       	pop	r31
 67a:	ef 91       	pop	r30
 67c:	bf 91       	pop	r27
 67e:	af 91       	pop	r26
 680:	9f 91       	pop	r25
 682:	8f 91       	pop	r24
 684:	7f 91       	pop	r23
 686:	6f 91       	pop	r22
 688:	5f 91       	pop	r21
 68a:	4f 91       	pop	r20
 68c:	3f 91       	pop	r19
 68e:	2f 91       	pop	r18
 690:	0f 90       	pop	r0
 692:	0f be       	out	0x3f, r0	; 63
 694:	0f 90       	pop	r0
 696:	1f 90       	pop	r1
 698:	18 95       	reti

0000069a <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 69a:	1f 92       	push	r1
 69c:	0f 92       	push	r0
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	0f 92       	push	r0
 6a2:	11 24       	eor	r1, r1
 6a4:	2f 93       	push	r18
 6a6:	3f 93       	push	r19
 6a8:	4f 93       	push	r20
 6aa:	5f 93       	push	r21
 6ac:	6f 93       	push	r22
 6ae:	7f 93       	push	r23
 6b0:	8f 93       	push	r24
 6b2:	9f 93       	push	r25
 6b4:	af 93       	push	r26
 6b6:	bf 93       	push	r27
 6b8:	ef 93       	push	r30
 6ba:	ff 93       	push	r31
	int Freq_reg=100;
	
	if(L_global < R_global)						// chose closer sensor
 6bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <L_global>
 6c0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <L_global+0x1>
 6c4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <R_global>
 6c8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <R_global+0x1>
 6cc:	82 17       	cp	r24, r18
 6ce:	93 07       	cpc	r25, r19
 6d0:	24 f0       	brlt	.+8      	; 0x6da <__vector_9+0x40>
	{
		Freq_reg = L_global;
	}	
	else if (R_global < L_global)
 6d2:	28 17       	cp	r18, r24
 6d4:	39 07       	cpc	r19, r25
 6d6:	7c f5       	brge	.+94     	; 0x736 <__vector_9+0x9c>
	{
		Freq_reg = R_global;
 6d8:	c9 01       	movw	r24, r18
	}
	
	if (Freq_reg <= 50 && Freq_reg > 40)		// set frequency of buzzer according to distance
 6da:	9c 01       	movw	r18, r24
 6dc:	ac 01       	movw	r20, r24
 6de:	49 52       	subi	r20, 0x29	; 41
 6e0:	51 09       	sbc	r21, r1
 6e2:	4a 30       	cpi	r20, 0x0A	; 10
 6e4:	51 05       	cpc	r21, r1
 6e6:	78 f4       	brcc	.+30     	; 0x706 <__vector_9+0x6c>
	{
		TIM2_overflow_16384us();				// set frequency
 6e8:	e1 eb       	ldi	r30, 0xB1	; 177
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	87 60       	ori	r24, 0x07	; 7
 6f0:	80 83       	st	Z, r24
		GPIO_toggle(&PORTB,sound);				// create sound 
 6f2:	62 e0       	ldi	r22, 0x02	; 2
 6f4:	85 e2       	ldi	r24, 0x25	; 37
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		LED_toggle(1);	
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 26 04 	call	0x84c	; 0x84c <LED_toggle>
 704:	5e c0       	rjmp	.+188    	; 0x7c2 <__vector_9+0x128>
	}
	else if (Freq_reg <= 40 && Freq_reg > 30)
 706:	ac 01       	movw	r20, r24
 708:	4f 51       	subi	r20, 0x1F	; 31
 70a:	51 09       	sbc	r21, r1
 70c:	4a 30       	cpi	r20, 0x0A	; 10
 70e:	51 05       	cpc	r21, r1
 710:	b0 f4       	brcc	.+44     	; 0x73e <__vector_9+0xa4>
	{
		TIM2_overflow_4096us();					// set frequency
 712:	e1 eb       	ldi	r30, 0xB1	; 177
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	8e 7f       	andi	r24, 0xFE	; 254
 71a:	80 83       	st	Z, r24
 71c:	80 81       	ld	r24, Z
 71e:	86 60       	ori	r24, 0x06	; 6
 720:	80 83       	st	Z, r24
		GPIO_toggle(&PORTB,sound);				// create sound
 722:	62 e0       	ldi	r22, 0x02	; 2
 724:	85 e2       	ldi	r24, 0x25	; 37
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		LED_toggle(2);
 72c:	82 e0       	ldi	r24, 0x02	; 2
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 26 04 	call	0x84c	; 0x84c <LED_toggle>
 734:	46 c0       	rjmp	.+140    	; 0x7c2 <__vector_9+0x128>
	else if (R_global < L_global)
	{
		Freq_reg = R_global;
	}
	
	if (Freq_reg <= 50 && Freq_reg > 40)		// set frequency of buzzer according to distance
 736:	24 e6       	ldi	r18, 0x64	; 100
 738:	30 e0       	ldi	r19, 0x00	; 0
	LED_off();									// every interrupt turns off LED 
}

ISR(TIMER2_OVF_vect)
{
	int Freq_reg=100;
 73a:	84 e6       	ldi	r24, 0x64	; 100
 73c:	90 e0       	ldi	r25, 0x00	; 0
	{
		TIM2_overflow_4096us();					// set frequency
		GPIO_toggle(&PORTB,sound);				// create sound
		LED_toggle(2);
	}	
	else if (Freq_reg <= 30 && Freq_reg > 20)
 73e:	a9 01       	movw	r20, r18
 740:	45 51       	subi	r20, 0x15	; 21
 742:	51 09       	sbc	r21, r1
 744:	4a 30       	cpi	r20, 0x0A	; 10
 746:	51 05       	cpc	r21, r1
 748:	90 f4       	brcc	.+36     	; 0x76e <__vector_9+0xd4>
	{
		TIM2_overflow_2048us();					// set frequency
 74a:	e1 eb       	ldi	r30, 0xB1	; 177
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	8d 7f       	andi	r24, 0xFD	; 253
 752:	80 83       	st	Z, r24
 754:	80 81       	ld	r24, Z
 756:	85 60       	ori	r24, 0x05	; 5
 758:	80 83       	st	Z, r24
		GPIO_toggle(&PORTB,sound);				// create sound
 75a:	62 e0       	ldi	r22, 0x02	; 2
 75c:	85 e2       	ldi	r24, 0x25	; 37
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		LED_toggle(3);
 764:	83 e0       	ldi	r24, 0x03	; 3
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 26 04 	call	0x84c	; 0x84c <LED_toggle>
 76c:	2a c0       	rjmp	.+84     	; 0x7c2 <__vector_9+0x128>
	}	
	else if (Freq_reg <= 20 && Freq_reg > 10)
 76e:	2b 50       	subi	r18, 0x0B	; 11
 770:	31 09       	sbc	r19, r1
 772:	2a 30       	cpi	r18, 0x0A	; 10
 774:	31 05       	cpc	r19, r1
 776:	90 f4       	brcc	.+36     	; 0x79c <__vector_9+0x102>
	{
		TIM2_overflow_1024us();					// set frequency
 778:	e1 eb       	ldi	r30, 0xB1	; 177
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	8c 7f       	andi	r24, 0xFC	; 252
 780:	80 83       	st	Z, r24
 782:	80 81       	ld	r24, Z
 784:	84 60       	ori	r24, 0x04	; 4
 786:	80 83       	st	Z, r24
		GPIO_toggle(&PORTB,sound);				// create sound
 788:	62 e0       	ldi	r22, 0x02	; 2
 78a:	85 e2       	ldi	r24, 0x25	; 37
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		LED_toggle(4);
 792:	84 e0       	ldi	r24, 0x04	; 4
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 26 04 	call	0x84c	; 0x84c <LED_toggle>
 79a:	13 c0       	rjmp	.+38     	; 0x7c2 <__vector_9+0x128>
	}	
	else if (Freq_reg <= 10)
 79c:	0b 97       	sbiw	r24, 0x0b	; 11
 79e:	8c f4       	brge	.+34     	; 0x7c2 <__vector_9+0x128>
	{
		TIM2_overflow_512us();					// set frequency
 7a0:	e1 eb       	ldi	r30, 0xB1	; 177
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	8b 7f       	andi	r24, 0xFB	; 251
 7a8:	80 83       	st	Z, r24
 7aa:	80 81       	ld	r24, Z
 7ac:	83 60       	ori	r24, 0x03	; 3
 7ae:	80 83       	st	Z, r24
		GPIO_toggle(&PORTB,sound);				// create sound
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	85 e2       	ldi	r24, 0x25	; 37
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
		LED_toggle(5);		
 7ba:	85 e0       	ldi	r24, 0x05	; 5
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 26 04 	call	0x84c	; 0x84c <LED_toggle>
	}	
}
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <LED_off>:
{
	GPIO_write_high(&PORTC,LED1);
	GPIO_write_high(&PORTC,LED2);
	GPIO_write_high(&PORTC,LED3);
	GPIO_write_high(&PORTC,LED4);
	GPIO_write_high(&PORTC,LED5);
 7e4:	61 e0       	ldi	r22, 0x01	; 1
 7e6:	88 e2       	ldi	r24, 0x28	; 40
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 7ee:	62 e0       	ldi	r22, 0x02	; 2
 7f0:	88 e2       	ldi	r24, 0x28	; 40
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 7f8:	63 e0       	ldi	r22, 0x03	; 3
 7fa:	88 e2       	ldi	r24, 0x28	; 40
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 802:	64 e0       	ldi	r22, 0x04	; 4
 804:	88 e2       	ldi	r24, 0x28	; 40
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 80c:	65 e0       	ldi	r22, 0x05	; 5
 80e:	88 e2       	ldi	r24, 0x28	; 40
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
 816:	08 95       	ret

00000818 <LED_out>:
}


void LED_out(void)
{
	GPIO_config_output(&DDRC,LED1);
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	87 e2       	ldi	r24, 0x27	; 39
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC,LED2);
 822:	62 e0       	ldi	r22, 0x02	; 2
 824:	87 e2       	ldi	r24, 0x27	; 39
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC,LED3);
 82c:	63 e0       	ldi	r22, 0x03	; 3
 82e:	87 e2       	ldi	r24, 0x27	; 39
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC,LED4);
 836:	64 e0       	ldi	r22, 0x04	; 4
 838:	87 e2       	ldi	r24, 0x27	; 39
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC,LED5);
 840:	65 e0       	ldi	r22, 0x05	; 5
 842:	87 e2       	ldi	r24, 0x27	; 39
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 84a:	08 95       	ret

0000084c <LED_toggle>:



void LED_toggle(int numb)
{
	switch(numb)
 84c:	83 30       	cpi	r24, 0x03	; 3
 84e:	91 05       	cpc	r25, r1
 850:	f1 f0       	breq	.+60     	; 0x88e <LED_toggle+0x42>
 852:	34 f4       	brge	.+12     	; 0x860 <LED_toggle+0x14>
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	91 05       	cpc	r25, r1
 858:	49 f0       	breq	.+18     	; 0x86c <LED_toggle+0x20>
 85a:	02 97       	sbiw	r24, 0x02	; 2
 85c:	69 f0       	breq	.+26     	; 0x878 <LED_toggle+0x2c>
 85e:	08 95       	ret
 860:	84 30       	cpi	r24, 0x04	; 4
 862:	91 05       	cpc	r25, r1
 864:	21 f1       	breq	.+72     	; 0x8ae <LED_toggle+0x62>
 866:	05 97       	sbiw	r24, 0x05	; 5
 868:	b9 f1       	breq	.+110    	; 0x8d8 <LED_toggle+0x8c>
 86a:	08 95       	ret
	{
		case 1: 
			GPIO_toggle(&PORTC,LED1);
 86c:	61 e0       	ldi	r22, 0x01	; 1
 86e:	88 e2       	ldi	r24, 0x28	; 40
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			break;
 876:	08 95       	ret
		case 2:
			GPIO_toggle(&PORTC,LED1);
 878:	61 e0       	ldi	r22, 0x01	; 1
 87a:	88 e2       	ldi	r24, 0x28	; 40
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED2);
 882:	62 e0       	ldi	r22, 0x02	; 2
 884:	88 e2       	ldi	r24, 0x28	; 40
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			break;
 88c:	08 95       	ret
		case 3:
			GPIO_toggle(&PORTC,LED1);
 88e:	61 e0       	ldi	r22, 0x01	; 1
 890:	88 e2       	ldi	r24, 0x28	; 40
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED2);
 898:	62 e0       	ldi	r22, 0x02	; 2
 89a:	88 e2       	ldi	r24, 0x28	; 40
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED3);
 8a2:	63 e0       	ldi	r22, 0x03	; 3
 8a4:	88 e2       	ldi	r24, 0x28	; 40
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			break;
 8ac:	08 95       	ret
		case 4:
			GPIO_toggle(&PORTC,LED1);
 8ae:	61 e0       	ldi	r22, 0x01	; 1
 8b0:	88 e2       	ldi	r24, 0x28	; 40
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED2);
 8b8:	62 e0       	ldi	r22, 0x02	; 2
 8ba:	88 e2       	ldi	r24, 0x28	; 40
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED3);
 8c2:	63 e0       	ldi	r22, 0x03	; 3
 8c4:	88 e2       	ldi	r24, 0x28	; 40
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED4);
 8cc:	64 e0       	ldi	r22, 0x04	; 4
 8ce:	88 e2       	ldi	r24, 0x28	; 40
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			break;
 8d6:	08 95       	ret
		case 5:
			GPIO_toggle(&PORTC,LED1);
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	88 e2       	ldi	r24, 0x28	; 40
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED2);
 8e2:	62 e0       	ldi	r22, 0x02	; 2
 8e4:	88 e2       	ldi	r24, 0x28	; 40
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED3);
 8ec:	63 e0       	ldi	r22, 0x03	; 3
 8ee:	88 e2       	ldi	r24, 0x28	; 40
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED4);
 8f6:	64 e0       	ldi	r22, 0x04	; 4
 8f8:	88 e2       	ldi	r24, 0x28	; 40
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
			GPIO_toggle(&PORTC,LED5);
 900:	65 e0       	ldi	r22, 0x05	; 5
 902:	88 e2       	ldi	r24, 0x28	; 40
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>
 90a:	08 95       	ret

0000090c <__vector_18>:
 90c:	1f 92       	push	r1
 90e:	0f 92       	push	r0
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	0f 92       	push	r0
 914:	11 24       	eor	r1, r1
 916:	2f 93       	push	r18
 918:	8f 93       	push	r24
 91a:	9f 93       	push	r25
 91c:	ef 93       	push	r30
 91e:	ff 93       	push	r31
 920:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 924:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 928:	8c 71       	andi	r24, 0x1C	; 28
 92a:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <UART_RxHead>
 92e:	ef 5f       	subi	r30, 0xFF	; 255
 930:	ef 71       	andi	r30, 0x1F	; 31
 932:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_RxTail>
 936:	e9 17       	cp	r30, r25
 938:	39 f0       	breq	.+14     	; 0x948 <__vector_18+0x3c>
 93a:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <UART_RxHead>
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	e7 5c       	subi	r30, 0xC7	; 199
 942:	fe 4f       	sbci	r31, 0xFE	; 254
 944:	20 83       	st	Z, r18
 946:	01 c0       	rjmp	.+2      	; 0x94a <__vector_18+0x3e>
 948:	82 e0       	ldi	r24, 0x02	; 2
 94a:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_LastRxError>
 94e:	89 2b       	or	r24, r25
 950:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <UART_LastRxError>
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	9f 91       	pop	r25
 95a:	8f 91       	pop	r24
 95c:	2f 91       	pop	r18
 95e:	0f 90       	pop	r0
 960:	0f be       	out	0x3f, r0	; 63
 962:	0f 90       	pop	r0
 964:	1f 90       	pop	r1
 966:	18 95       	reti

00000968 <__vector_19>:
 968:	1f 92       	push	r1
 96a:	0f 92       	push	r0
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	0f 92       	push	r0
 970:	11 24       	eor	r1, r1
 972:	8f 93       	push	r24
 974:	9f 93       	push	r25
 976:	ef 93       	push	r30
 978:	ff 93       	push	r31
 97a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <UART_TxHead>
 97e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <UART_TxTail>
 982:	98 17       	cp	r25, r24
 984:	69 f0       	breq	.+26     	; 0x9a0 <__vector_19+0x38>
 986:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <UART_TxTail>
 98a:	ef 5f       	subi	r30, 0xFF	; 255
 98c:	ef 71       	andi	r30, 0x1F	; 31
 98e:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <UART_TxTail>
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	e7 5a       	subi	r30, 0xA7	; 167
 996:	fe 4f       	sbci	r31, 0xFE	; 254
 998:	80 81       	ld	r24, Z
 99a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 99e:	05 c0       	rjmp	.+10     	; 0x9aa <__vector_19+0x42>
 9a0:	e1 ec       	ldi	r30, 0xC1	; 193
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	8f 7d       	andi	r24, 0xDF	; 223
 9a8:	80 83       	st	Z, r24
 9aa:	ff 91       	pop	r31
 9ac:	ef 91       	pop	r30
 9ae:	9f 91       	pop	r25
 9b0:	8f 91       	pop	r24
 9b2:	0f 90       	pop	r0
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	0f 90       	pop	r0
 9b8:	1f 90       	pop	r1
 9ba:	18 95       	reti

000009bc <uart_init>:
 9bc:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <UART_TxHead>
 9c0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <UART_TxTail>
 9c4:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <UART_RxHead>
 9c8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <UART_RxTail>
 9cc:	99 23       	and	r25, r25
 9ce:	1c f4       	brge	.+6      	; 0x9d6 <uart_init+0x1a>
 9d0:	22 e0       	ldi	r18, 0x02	; 2
 9d2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 9d6:	90 78       	andi	r25, 0x80	; 128
 9d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 9dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 9e0:	88 e9       	ldi	r24, 0x98	; 152
 9e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 9e6:	86 e0       	ldi	r24, 0x06	; 6
 9e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 9ec:	08 95       	ret

000009ee <uart_putc>:
 9ee:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <UART_TxHead>
 9f2:	2f 5f       	subi	r18, 0xFF	; 255
 9f4:	2f 71       	andi	r18, 0x1F	; 31
 9f6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <UART_TxTail>
 9fa:	29 17       	cp	r18, r25
 9fc:	e1 f3       	breq	.-8      	; 0x9f6 <uart_putc+0x8>
 9fe:	e2 2f       	mov	r30, r18
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	e7 5a       	subi	r30, 0xA7	; 167
 a04:	fe 4f       	sbci	r31, 0xFE	; 254
 a06:	80 83       	st	Z, r24
 a08:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <UART_TxHead>
 a0c:	e1 ec       	ldi	r30, 0xC1	; 193
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	80 81       	ld	r24, Z
 a12:	80 62       	ori	r24, 0x20	; 32
 a14:	80 83       	st	Z, r24
 a16:	08 95       	ret

00000a18 <uart_puts>:
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	ec 01       	movw	r28, r24
 a1e:	88 81       	ld	r24, Y
 a20:	88 23       	and	r24, r24
 a22:	31 f0       	breq	.+12     	; 0xa30 <uart_puts+0x18>
 a24:	21 96       	adiw	r28, 0x01	; 1
 a26:	0e 94 f7 04 	call	0x9ee	; 0x9ee <uart_putc>
 a2a:	89 91       	ld	r24, Y+
 a2c:	81 11       	cpse	r24, r1
 a2e:	fb cf       	rjmp	.-10     	; 0xa26 <uart_puts+0xe>
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	08 95       	ret

00000a36 <__divsf3>:
 a36:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__divsf3x>
 a3a:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_round>
 a3e:	0e 94 09 06 	call	0xc12	; 0xc12 <__fp_pscB>
 a42:	58 f0       	brcs	.+22     	; 0xa5a <__divsf3+0x24>
 a44:	0e 94 02 06 	call	0xc04	; 0xc04 <__fp_pscA>
 a48:	40 f0       	brcs	.+16     	; 0xa5a <__divsf3+0x24>
 a4a:	29 f4       	brne	.+10     	; 0xa56 <__divsf3+0x20>
 a4c:	5f 3f       	cpi	r21, 0xFF	; 255
 a4e:	29 f0       	breq	.+10     	; 0xa5a <__divsf3+0x24>
 a50:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_inf>
 a54:	51 11       	cpse	r21, r1
 a56:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_szero>
 a5a:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__fp_nan>

00000a5e <__divsf3x>:
 a5e:	0e 94 21 06 	call	0xc42	; 0xc42 <__fp_split3>
 a62:	68 f3       	brcs	.-38     	; 0xa3e <__divsf3+0x8>

00000a64 <__divsf3_pse>:
 a64:	99 23       	and	r25, r25
 a66:	b1 f3       	breq	.-20     	; 0xa54 <__divsf3+0x1e>
 a68:	55 23       	and	r21, r21
 a6a:	91 f3       	breq	.-28     	; 0xa50 <__divsf3+0x1a>
 a6c:	95 1b       	sub	r25, r21
 a6e:	55 0b       	sbc	r21, r21
 a70:	bb 27       	eor	r27, r27
 a72:	aa 27       	eor	r26, r26
 a74:	62 17       	cp	r22, r18
 a76:	73 07       	cpc	r23, r19
 a78:	84 07       	cpc	r24, r20
 a7a:	38 f0       	brcs	.+14     	; 0xa8a <__divsf3_pse+0x26>
 a7c:	9f 5f       	subi	r25, 0xFF	; 255
 a7e:	5f 4f       	sbci	r21, 0xFF	; 255
 a80:	22 0f       	add	r18, r18
 a82:	33 1f       	adc	r19, r19
 a84:	44 1f       	adc	r20, r20
 a86:	aa 1f       	adc	r26, r26
 a88:	a9 f3       	breq	.-22     	; 0xa74 <__divsf3_pse+0x10>
 a8a:	35 d0       	rcall	.+106    	; 0xaf6 <__divsf3_pse+0x92>
 a8c:	0e 2e       	mov	r0, r30
 a8e:	3a f0       	brmi	.+14     	; 0xa9e <__divsf3_pse+0x3a>
 a90:	e0 e8       	ldi	r30, 0x80	; 128
 a92:	32 d0       	rcall	.+100    	; 0xaf8 <__divsf3_pse+0x94>
 a94:	91 50       	subi	r25, 0x01	; 1
 a96:	50 40       	sbci	r21, 0x00	; 0
 a98:	e6 95       	lsr	r30
 a9a:	00 1c       	adc	r0, r0
 a9c:	ca f7       	brpl	.-14     	; 0xa90 <__divsf3_pse+0x2c>
 a9e:	2b d0       	rcall	.+86     	; 0xaf6 <__divsf3_pse+0x92>
 aa0:	fe 2f       	mov	r31, r30
 aa2:	29 d0       	rcall	.+82     	; 0xaf6 <__divsf3_pse+0x92>
 aa4:	66 0f       	add	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	bb 1f       	adc	r27, r27
 aac:	26 17       	cp	r18, r22
 aae:	37 07       	cpc	r19, r23
 ab0:	48 07       	cpc	r20, r24
 ab2:	ab 07       	cpc	r26, r27
 ab4:	b0 e8       	ldi	r27, 0x80	; 128
 ab6:	09 f0       	breq	.+2      	; 0xaba <__divsf3_pse+0x56>
 ab8:	bb 0b       	sbc	r27, r27
 aba:	80 2d       	mov	r24, r0
 abc:	bf 01       	movw	r22, r30
 abe:	ff 27       	eor	r31, r31
 ac0:	93 58       	subi	r25, 0x83	; 131
 ac2:	5f 4f       	sbci	r21, 0xFF	; 255
 ac4:	3a f0       	brmi	.+14     	; 0xad4 <__divsf3_pse+0x70>
 ac6:	9e 3f       	cpi	r25, 0xFE	; 254
 ac8:	51 05       	cpc	r21, r1
 aca:	78 f0       	brcs	.+30     	; 0xaea <__divsf3_pse+0x86>
 acc:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__fp_inf>
 ad0:	0c 94 44 06 	jmp	0xc88	; 0xc88 <__fp_szero>
 ad4:	5f 3f       	cpi	r21, 0xFF	; 255
 ad6:	e4 f3       	brlt	.-8      	; 0xad0 <__divsf3_pse+0x6c>
 ad8:	98 3e       	cpi	r25, 0xE8	; 232
 ada:	d4 f3       	brlt	.-12     	; 0xad0 <__divsf3_pse+0x6c>
 adc:	86 95       	lsr	r24
 ade:	77 95       	ror	r23
 ae0:	67 95       	ror	r22
 ae2:	b7 95       	ror	r27
 ae4:	f7 95       	ror	r31
 ae6:	9f 5f       	subi	r25, 0xFF	; 255
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__divsf3_pse+0x78>
 aea:	88 0f       	add	r24, r24
 aec:	91 1d       	adc	r25, r1
 aee:	96 95       	lsr	r25
 af0:	87 95       	ror	r24
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret
 af6:	e1 e0       	ldi	r30, 0x01	; 1
 af8:	66 0f       	add	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	bb 1f       	adc	r27, r27
 b00:	62 17       	cp	r22, r18
 b02:	73 07       	cpc	r23, r19
 b04:	84 07       	cpc	r24, r20
 b06:	ba 07       	cpc	r27, r26
 b08:	20 f0       	brcs	.+8      	; 0xb12 <__divsf3_pse+0xae>
 b0a:	62 1b       	sub	r22, r18
 b0c:	73 0b       	sbc	r23, r19
 b0e:	84 0b       	sbc	r24, r20
 b10:	ba 0b       	sbc	r27, r26
 b12:	ee 1f       	adc	r30, r30
 b14:	88 f7       	brcc	.-30     	; 0xaf8 <__divsf3_pse+0x94>
 b16:	e0 95       	com	r30
 b18:	08 95       	ret

00000b1a <__fixunssfsi>:
 b1a:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_splitA>
 b1e:	88 f0       	brcs	.+34     	; 0xb42 <__fixunssfsi+0x28>
 b20:	9f 57       	subi	r25, 0x7F	; 127
 b22:	98 f0       	brcs	.+38     	; 0xb4a <__fixunssfsi+0x30>
 b24:	b9 2f       	mov	r27, r25
 b26:	99 27       	eor	r25, r25
 b28:	b7 51       	subi	r27, 0x17	; 23
 b2a:	b0 f0       	brcs	.+44     	; 0xb58 <__fixunssfsi+0x3e>
 b2c:	e1 f0       	breq	.+56     	; 0xb66 <__fixunssfsi+0x4c>
 b2e:	66 0f       	add	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	1a f0       	brmi	.+6      	; 0xb3e <__fixunssfsi+0x24>
 b38:	ba 95       	dec	r27
 b3a:	c9 f7       	brne	.-14     	; 0xb2e <__fixunssfsi+0x14>
 b3c:	14 c0       	rjmp	.+40     	; 0xb66 <__fixunssfsi+0x4c>
 b3e:	b1 30       	cpi	r27, 0x01	; 1
 b40:	91 f0       	breq	.+36     	; 0xb66 <__fixunssfsi+0x4c>
 b42:	0e 94 43 06 	call	0xc86	; 0xc86 <__fp_zero>
 b46:	b1 e0       	ldi	r27, 0x01	; 1
 b48:	08 95       	ret
 b4a:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__fp_zero>
 b4e:	67 2f       	mov	r22, r23
 b50:	78 2f       	mov	r23, r24
 b52:	88 27       	eor	r24, r24
 b54:	b8 5f       	subi	r27, 0xF8	; 248
 b56:	39 f0       	breq	.+14     	; 0xb66 <__fixunssfsi+0x4c>
 b58:	b9 3f       	cpi	r27, 0xF9	; 249
 b5a:	cc f3       	brlt	.-14     	; 0xb4e <__fixunssfsi+0x34>
 b5c:	86 95       	lsr	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	b3 95       	inc	r27
 b64:	d9 f7       	brne	.-10     	; 0xb5c <__fixunssfsi+0x42>
 b66:	3e f4       	brtc	.+14     	; 0xb76 <__fixunssfsi+0x5c>
 b68:	90 95       	com	r25
 b6a:	80 95       	com	r24
 b6c:	70 95       	com	r23
 b6e:	61 95       	neg	r22
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	08 95       	ret

00000b78 <__floatunsisf>:
 b78:	e8 94       	clt
 b7a:	09 c0       	rjmp	.+18     	; 0xb8e <__floatsisf+0x12>

00000b7c <__floatsisf>:
 b7c:	97 fb       	bst	r25, 7
 b7e:	3e f4       	brtc	.+14     	; 0xb8e <__floatsisf+0x12>
 b80:	90 95       	com	r25
 b82:	80 95       	com	r24
 b84:	70 95       	com	r23
 b86:	61 95       	neg	r22
 b88:	7f 4f       	sbci	r23, 0xFF	; 255
 b8a:	8f 4f       	sbci	r24, 0xFF	; 255
 b8c:	9f 4f       	sbci	r25, 0xFF	; 255
 b8e:	99 23       	and	r25, r25
 b90:	a9 f0       	breq	.+42     	; 0xbbc <__floatsisf+0x40>
 b92:	f9 2f       	mov	r31, r25
 b94:	96 e9       	ldi	r25, 0x96	; 150
 b96:	bb 27       	eor	r27, r27
 b98:	93 95       	inc	r25
 b9a:	f6 95       	lsr	r31
 b9c:	87 95       	ror	r24
 b9e:	77 95       	ror	r23
 ba0:	67 95       	ror	r22
 ba2:	b7 95       	ror	r27
 ba4:	f1 11       	cpse	r31, r1
 ba6:	f8 cf       	rjmp	.-16     	; 0xb98 <__floatsisf+0x1c>
 ba8:	fa f4       	brpl	.+62     	; 0xbe8 <__floatsisf+0x6c>
 baa:	bb 0f       	add	r27, r27
 bac:	11 f4       	brne	.+4      	; 0xbb2 <__floatsisf+0x36>
 bae:	60 ff       	sbrs	r22, 0
 bb0:	1b c0       	rjmp	.+54     	; 0xbe8 <__floatsisf+0x6c>
 bb2:	6f 5f       	subi	r22, 0xFF	; 255
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255
 bb6:	8f 4f       	sbci	r24, 0xFF	; 255
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	16 c0       	rjmp	.+44     	; 0xbe8 <__floatsisf+0x6c>
 bbc:	88 23       	and	r24, r24
 bbe:	11 f0       	breq	.+4      	; 0xbc4 <__floatsisf+0x48>
 bc0:	96 e9       	ldi	r25, 0x96	; 150
 bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <__floatsisf+0x6a>
 bc4:	77 23       	and	r23, r23
 bc6:	21 f0       	breq	.+8      	; 0xbd0 <__floatsisf+0x54>
 bc8:	9e e8       	ldi	r25, 0x8E	; 142
 bca:	87 2f       	mov	r24, r23
 bcc:	76 2f       	mov	r23, r22
 bce:	05 c0       	rjmp	.+10     	; 0xbda <__floatsisf+0x5e>
 bd0:	66 23       	and	r22, r22
 bd2:	71 f0       	breq	.+28     	; 0xbf0 <__floatsisf+0x74>
 bd4:	96 e8       	ldi	r25, 0x86	; 134
 bd6:	86 2f       	mov	r24, r22
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	60 e0       	ldi	r22, 0x00	; 0
 bdc:	2a f0       	brmi	.+10     	; 0xbe8 <__floatsisf+0x6c>
 bde:	9a 95       	dec	r25
 be0:	66 0f       	add	r22, r22
 be2:	77 1f       	adc	r23, r23
 be4:	88 1f       	adc	r24, r24
 be6:	da f7       	brpl	.-10     	; 0xbde <__floatsisf+0x62>
 be8:	88 0f       	add	r24, r24
 bea:	96 95       	lsr	r25
 bec:	87 95       	ror	r24
 bee:	97 f9       	bld	r25, 7
 bf0:	08 95       	ret

00000bf2 <__fp_inf>:
 bf2:	97 f9       	bld	r25, 7
 bf4:	9f 67       	ori	r25, 0x7F	; 127
 bf6:	80 e8       	ldi	r24, 0x80	; 128
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	60 e0       	ldi	r22, 0x00	; 0
 bfc:	08 95       	ret

00000bfe <__fp_nan>:
 bfe:	9f ef       	ldi	r25, 0xFF	; 255
 c00:	80 ec       	ldi	r24, 0xC0	; 192
 c02:	08 95       	ret

00000c04 <__fp_pscA>:
 c04:	00 24       	eor	r0, r0
 c06:	0a 94       	dec	r0
 c08:	16 16       	cp	r1, r22
 c0a:	17 06       	cpc	r1, r23
 c0c:	18 06       	cpc	r1, r24
 c0e:	09 06       	cpc	r0, r25
 c10:	08 95       	ret

00000c12 <__fp_pscB>:
 c12:	00 24       	eor	r0, r0
 c14:	0a 94       	dec	r0
 c16:	12 16       	cp	r1, r18
 c18:	13 06       	cpc	r1, r19
 c1a:	14 06       	cpc	r1, r20
 c1c:	05 06       	cpc	r0, r21
 c1e:	08 95       	ret

00000c20 <__fp_round>:
 c20:	09 2e       	mov	r0, r25
 c22:	03 94       	inc	r0
 c24:	00 0c       	add	r0, r0
 c26:	11 f4       	brne	.+4      	; 0xc2c <__fp_round+0xc>
 c28:	88 23       	and	r24, r24
 c2a:	52 f0       	brmi	.+20     	; 0xc40 <__fp_round+0x20>
 c2c:	bb 0f       	add	r27, r27
 c2e:	40 f4       	brcc	.+16     	; 0xc40 <__fp_round+0x20>
 c30:	bf 2b       	or	r27, r31
 c32:	11 f4       	brne	.+4      	; 0xc38 <__fp_round+0x18>
 c34:	60 ff       	sbrs	r22, 0
 c36:	04 c0       	rjmp	.+8      	; 0xc40 <__fp_round+0x20>
 c38:	6f 5f       	subi	r22, 0xFF	; 255
 c3a:	7f 4f       	sbci	r23, 0xFF	; 255
 c3c:	8f 4f       	sbci	r24, 0xFF	; 255
 c3e:	9f 4f       	sbci	r25, 0xFF	; 255
 c40:	08 95       	ret

00000c42 <__fp_split3>:
 c42:	57 fd       	sbrc	r21, 7
 c44:	90 58       	subi	r25, 0x80	; 128
 c46:	44 0f       	add	r20, r20
 c48:	55 1f       	adc	r21, r21
 c4a:	59 f0       	breq	.+22     	; 0xc62 <__fp_splitA+0x10>
 c4c:	5f 3f       	cpi	r21, 0xFF	; 255
 c4e:	71 f0       	breq	.+28     	; 0xc6c <__fp_splitA+0x1a>
 c50:	47 95       	ror	r20

00000c52 <__fp_splitA>:
 c52:	88 0f       	add	r24, r24
 c54:	97 fb       	bst	r25, 7
 c56:	99 1f       	adc	r25, r25
 c58:	61 f0       	breq	.+24     	; 0xc72 <__fp_splitA+0x20>
 c5a:	9f 3f       	cpi	r25, 0xFF	; 255
 c5c:	79 f0       	breq	.+30     	; 0xc7c <__fp_splitA+0x2a>
 c5e:	87 95       	ror	r24
 c60:	08 95       	ret
 c62:	12 16       	cp	r1, r18
 c64:	13 06       	cpc	r1, r19
 c66:	14 06       	cpc	r1, r20
 c68:	55 1f       	adc	r21, r21
 c6a:	f2 cf       	rjmp	.-28     	; 0xc50 <__fp_split3+0xe>
 c6c:	46 95       	lsr	r20
 c6e:	f1 df       	rcall	.-30     	; 0xc52 <__fp_splitA>
 c70:	08 c0       	rjmp	.+16     	; 0xc82 <__fp_splitA+0x30>
 c72:	16 16       	cp	r1, r22
 c74:	17 06       	cpc	r1, r23
 c76:	18 06       	cpc	r1, r24
 c78:	99 1f       	adc	r25, r25
 c7a:	f1 cf       	rjmp	.-30     	; 0xc5e <__fp_splitA+0xc>
 c7c:	86 95       	lsr	r24
 c7e:	71 05       	cpc	r23, r1
 c80:	61 05       	cpc	r22, r1
 c82:	08 94       	sec
 c84:	08 95       	ret

00000c86 <__fp_zero>:
 c86:	e8 94       	clt

00000c88 <__fp_szero>:
 c88:	bb 27       	eor	r27, r27
 c8a:	66 27       	eor	r22, r22
 c8c:	77 27       	eor	r23, r23
 c8e:	cb 01       	movw	r24, r22
 c90:	97 f9       	bld	r25, 7
 c92:	08 95       	ret

00000c94 <__itoa_ncheck>:
 c94:	bb 27       	eor	r27, r27
 c96:	4a 30       	cpi	r20, 0x0A	; 10
 c98:	31 f4       	brne	.+12     	; 0xca6 <__itoa_ncheck+0x12>
 c9a:	99 23       	and	r25, r25
 c9c:	22 f4       	brpl	.+8      	; 0xca6 <__itoa_ncheck+0x12>
 c9e:	bd e2       	ldi	r27, 0x2D	; 45
 ca0:	90 95       	com	r25
 ca2:	81 95       	neg	r24
 ca4:	9f 4f       	sbci	r25, 0xFF	; 255
 ca6:	0c 94 56 06 	jmp	0xcac	; 0xcac <__utoa_common>

00000caa <__utoa_ncheck>:
 caa:	bb 27       	eor	r27, r27

00000cac <__utoa_common>:
 cac:	fb 01       	movw	r30, r22
 cae:	55 27       	eor	r21, r21
 cb0:	aa 27       	eor	r26, r26
 cb2:	88 0f       	add	r24, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	aa 1f       	adc	r26, r26
 cb8:	a4 17       	cp	r26, r20
 cba:	10 f0       	brcs	.+4      	; 0xcc0 <__utoa_common+0x14>
 cbc:	a4 1b       	sub	r26, r20
 cbe:	83 95       	inc	r24
 cc0:	50 51       	subi	r21, 0x10	; 16
 cc2:	b9 f7       	brne	.-18     	; 0xcb2 <__utoa_common+0x6>
 cc4:	a0 5d       	subi	r26, 0xD0	; 208
 cc6:	aa 33       	cpi	r26, 0x3A	; 58
 cc8:	08 f0       	brcs	.+2      	; 0xccc <__utoa_common+0x20>
 cca:	a9 5d       	subi	r26, 0xD9	; 217
 ccc:	a1 93       	st	Z+, r26
 cce:	00 97       	sbiw	r24, 0x00	; 0
 cd0:	79 f7       	brne	.-34     	; 0xcb0 <__utoa_common+0x4>
 cd2:	b1 11       	cpse	r27, r1
 cd4:	b1 93       	st	Z+, r27
 cd6:	11 92       	st	Z+, r1
 cd8:	cb 01       	movw	r24, r22
 cda:	0c 94 6f 06 	jmp	0xcde	; 0xcde <strrev>

00000cde <strrev>:
 cde:	dc 01       	movw	r26, r24
 ce0:	fc 01       	movw	r30, r24
 ce2:	67 2f       	mov	r22, r23
 ce4:	71 91       	ld	r23, Z+
 ce6:	77 23       	and	r23, r23
 ce8:	e1 f7       	brne	.-8      	; 0xce2 <strrev+0x4>
 cea:	32 97       	sbiw	r30, 0x02	; 2
 cec:	04 c0       	rjmp	.+8      	; 0xcf6 <strrev+0x18>
 cee:	7c 91       	ld	r23, X
 cf0:	6d 93       	st	X+, r22
 cf2:	70 83       	st	Z, r23
 cf4:	62 91       	ld	r22, -Z
 cf6:	ae 17       	cp	r26, r30
 cf8:	bf 07       	cpc	r27, r31
 cfa:	c8 f3       	brcs	.-14     	; 0xcee <strrev+0x10>
 cfc:	08 95       	ret

00000cfe <_exit>:
 cfe:	f8 94       	cli

00000d00 <__stop_program>:
 d00:	ff cf       	rjmp	.-2      	; 0xd00 <__stop_program>
