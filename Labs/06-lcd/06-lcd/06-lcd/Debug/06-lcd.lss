
06-lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080013a  0080013a  000006a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015fa  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099e  00000000  00000000  00001dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a0  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000030fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000538  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ec  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  9e:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	00 00       	nop
  aa:	29 98       	cbi	0x05, 1	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	54 9a       	sbi	0x0a, 4	; 10
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	56 9a       	sbi	0x0a, 6	; 10
  c2:	57 9a       	sbi	0x0a, 7	; 10
  c4:	5f 98       	cbi	0x0b, 7	; 11
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	cc 23       	and	r28, r28
  ce:	0c f4       	brge	.+2      	; 0xd2 <lcd_write+0x24>
  d0:	5f 9a       	sbi	0x0b, 7	; 11
  d2:	c6 fd       	sbrc	r28, 6
  d4:	5e 9a       	sbi	0x0b, 6	; 11
  d6:	c5 fd       	sbrc	r28, 5
  d8:	5d 9a       	sbi	0x0b, 5	; 11
  da:	c4 fd       	sbrc	r28, 4
  dc:	5c 9a       	sbi	0x0b, 4	; 11
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e2:	5f 98       	cbi	0x0b, 7	; 11
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	c3 fd       	sbrc	r28, 3
  ec:	5f 9a       	sbi	0x0b, 7	; 11
  ee:	c2 fd       	sbrc	r28, 2
  f0:	5e 9a       	sbi	0x0b, 6	; 11
  f2:	c1 fd       	sbrc	r28, 1
  f4:	5d 9a       	sbi	0x0b, 5	; 11
  f6:	c0 fd       	sbrc	r28, 0
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	5d 9a       	sbi	0x0b, 5	; 11
 102:	5e 9a       	sbi	0x0b, 6	; 11
 104:	5f 9a       	sbi	0x0b, 7	; 11
 106:	8a ef       	ldi	r24, 0xFA	; 250
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write+0x5a>
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_command>:
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 116:	08 95       	ret

00000118 <lcd_data>:
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 11e:	08 95       	ret

00000120 <lcd_gotoxy>:
 120:	61 11       	cpse	r22, r1
 122:	04 c0       	rjmp	.+8      	; 0x12c <lcd_gotoxy+0xc>
 124:	80 58       	subi	r24, 0x80	; 128
 126:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 12a:	08 95       	ret
 12c:	80 54       	subi	r24, 0x40	; 64
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 132:	08 95       	ret

00000134 <lcd_clrscr>:
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 13a:	08 95       	ret

0000013c <lcd_putc>:
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 142:	08 95       	ret

00000144 <lcd_puts>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ec 01       	movw	r28, r24
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	88 23       	and	r24, r24
 152:	29 f0       	breq	.+10     	; 0x15e <lcd_puts+0x1a>
 154:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
 158:	89 91       	ld	r24, Y+
 15a:	81 11       	cpse	r24, r1
 15c:	fb cf       	rjmp	.-10     	; 0x154 <lcd_puts+0x10>
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 168:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16a:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 16c:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 16e:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 170:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 172:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 174:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_init+0x16>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_init+0x1c>
 180:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 182:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 184:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18a:	81 ee       	ldi	r24, 0xE1	; 225
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_init+0x2a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_init+0x30>
 194:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19a:	95 e1       	ldi	r25, 0x15	; 21
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init+0x38>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	85 e1       	ldi	r24, 0x15	; 21
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x44>
 1ac:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ae:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b4:	95 e1       	ldi	r25, 0x15	; 21
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x52>
 1ba:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1c8:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
}/* lcd_init */
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:
 * value on LCD display when 8-bit Timer/Counter2 overflows.
 */
int main(void)
{
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_init>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 1e2:	80 e4       	ldi	r24, 0x40	; 64
 1e4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 1e8:	0f 2e       	mov	r0, r31
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	ef 2e       	mov	r14, r31
 1ee:	f1 e0       	ldi	r31, 0x01	; 1
 1f0:	ff 2e       	mov	r15, r31
 1f2:	f0 2d       	mov	r31, r0
 1f4:	09 e2       	ldi	r16, 0x29	; 41
 1f6:	11 e0       	ldi	r17, 0x01	; 1
 1f8:	e7 01       	movw	r28, r14
	for (uint8_t i = 0; i < 40; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 1fa:	89 91       	ld	r24, Y+
 1fc:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 40; i++)
 200:	c0 17       	cp	r28, r16
 202:	d1 07       	cpc	r29, r17
 204:	d1 f7       	brne	.-12     	; 0x1fa <main+0x1e>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>

	// Display first custom character
	lcd_putc(0);	
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>

// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>
 218:	c9 e0       	ldi	r28, 0x09	; 9
 21a:	d1 e0       	ldi	r29, 0x01	; 1
	for (uint8_t i = 0; i < 8; i++)
	{
	// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 21c:	f7 01       	movw	r30, r14
 21e:	81 91       	ld	r24, Z+
 220:	7f 01       	movw	r14, r30
 222:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_data>
	// Display first custom character
	lcd_putc(0);	

// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 8; i++)
 226:	ec 16       	cp	r14, r28
 228:	fd 06       	cpc	r15, r29
 22a:	c1 f7       	brne	.-16     	; 0x21c <main+0x40>
	{
	// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_command>

 	// Display first custom character
 	lcd_putc(0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
    lcd_puts("00:00.0");
 240:	81 e3       	ldi	r24, 0x31	; 49
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
	lcd_gotoxy(11, 0);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	8b e0       	ldi	r24, 0x0B	; 11
 24c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
    lcd_putc('a');
 250:	81 e6       	ldi	r24, 0x61	; 97
 252:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	lcd_gotoxy(1, 1);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc('b');
 25e:	82 e6       	ldi	r24, 0x62	; 98
 260:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	lcd_gotoxy(11, 1);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	8b e0       	ldi	r24, 0x0B	; 11
 268:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc('c');
 26c:	83 e6       	ldi	r24, 0x63	; 99
 26e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	
	// Configure 8-bit Timer/Counter0 for Stopwatch
	// Set prescaler and enable overflow interrupt every 16 ms
	
	TIM0_overflow_16ms();
 272:	85 b5       	in	r24, 0x25	; 37
 274:	8d 7f       	andi	r24, 0xFD	; 253
 276:	85 bd       	out	0x25, r24	; 37
 278:	85 b5       	in	r24, 0x25	; 37
 27a:	85 60       	ori	r24, 0x05	; 5
 27c:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 27e:	ee e6       	ldi	r30, 0x6E	; 110
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	81 60       	ori	r24, 0x01	; 1
 286:	80 83       	st	Z, r24
	
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	
	TIM2_overflow_16ms();
 288:	e1 eb       	ldi	r30, 0xB1	; 177
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	87 60       	ori	r24, 0x07	; 7
 290:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 292:	e0 e7       	ldi	r30, 0x70	; 112
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	80 83       	st	Z, r24
	

    // Enables interrupts by setting the global interrupt mask
    sei();
 29c:	78 94       	sei
 29e:	ff cf       	rjmp	.-2      	; 0x29e <main+0xc2>

000002a0 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <__vector_9+0x28>
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows2 = 0;
    static uint8_t tens = 0;							// Tenths of a second
	static uint8_t secs = 0;							// Seconds
	static uint8_t mins = 0;							// Minutes
	static uint32_t square_secs = 0;					// Square seconds
    char lcd_string[2] = "  ";							// String for converting numbers by itoa()
 2cc:	80 e2       	ldi	r24, 0x20	; 32
 2ce:	90 e2       	ldi	r25, 0x20	; 32
 2d0:	9a 83       	std	Y+2, r25	; 0x02
 2d2:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t clearing_square = 11;				// Helping number for clearing square seconds
	
    number_of_overflows2++;
 2d4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <number_of_overflows2.1955>
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows2 >= 6)
 2da:	86 30       	cpi	r24, 0x06	; 6
 2dc:	18 f4       	brcc	.+6      	; 0x2e4 <__vector_9+0x44>
	static uint8_t mins = 0;							// Minutes
	static uint32_t square_secs = 0;					// Square seconds
    char lcd_string[2] = "  ";							// String for converting numbers by itoa()
	static uint8_t clearing_square = 11;				// Helping number for clearing square seconds
	
    number_of_overflows2++;
 2de:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <number_of_overflows2.1955>
 2e2:	ce c0       	rjmp	.+412    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
    if (number_of_overflows2 >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows2 = 0;
 2e4:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <number_of_overflows2.1955>
		tens++;
 2e8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <tens.1956>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
		if (tens>9)										//incrementing tenths until 9
 2ee:	8a 30       	cpi	r24, 0x0A	; 10
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <__vector_9+0x58>
    number_of_overflows2++;
    if (number_of_overflows2 >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows2 = 0;
		tens++;
 2f2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <tens.1956>
 2f6:	b3 c0       	rjmp	.+358    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		if (tens>9)										//incrementing tenths until 9
		{
			tens=0;
 2f8:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tens.1956>
			secs++;
 2fc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <secs.1957>
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <secs.1957>
			if(secs > 59)								//incrementing seconds until 59
 306:	8c 33       	cpi	r24, 0x3C	; 60
 308:	08 f4       	brcc	.+2      	; 0x30c <__vector_9+0x6c>
 30a:	63 c0       	rjmp	.+198    	; 0x3d2 <__vector_9+0x132>
			{
				while (clearing_square<15)				//clearing of square seconds after minute
 30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 310:	8f 30       	cpi	r24, 0x0F	; 15
 312:	68 f4       	brcc	.+26     	; 0x32e <__vector_9+0x8e>
				{
					lcd_gotoxy(clearing_square, 0);		//sets cursor to wanted location
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
					lcd_putc(0);						//secures zeroing of square seconds after 59 minutes
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
					clearing_square++;
 320:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		{
			tens=0;
			secs++;
			if(secs > 59)								//incrementing seconds until 59
			{
				while (clearing_square<15)				//clearing of square seconds after minute
 32a:	8f 30       	cpi	r24, 0x0F	; 15
 32c:	98 f3       	brcs	.-26     	; 0x314 <__vector_9+0x74>
				{
					lcd_gotoxy(clearing_square, 0);		//sets cursor to wanted location
					lcd_putc(0);						//secures zeroing of square seconds after 59 minutes
					clearing_square++;
				}
				clearing_square=11;						//prepares number zeroing for next loop
 32e:	8b e0       	ldi	r24, 0x0B	; 11
 330:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				secs=0;									//ensures zeroing of seconds after minute
 334:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <secs.1957>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 338:	4a e0       	ldi	r20, 0x0A	; 10
 33a:	be 01       	movw	r22, r28
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
				itoa(secs, lcd_string, 10);				//sends seconds to string
				lcd_gotoxy(4, 0);						//sets cursor into location
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
				lcd_puts(lcd_string);					//sends data on cursor
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
				mins++;									//increments minutes
 358:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <mins.1958>
 35c:	8f 5f       	subi	r24, 0xFF	; 255
				if(mins > 59)							//zeroing after an hour
 35e:	8c 33       	cpi	r24, 0x3C	; 60
 360:	18 f4       	brcc	.+6      	; 0x368 <__vector_9+0xc8>
				clearing_square=11;						//prepares number zeroing for next loop
				secs=0;									//ensures zeroing of seconds after minute
				itoa(secs, lcd_string, 10);				//sends seconds to string
				lcd_gotoxy(4, 0);						//sets cursor into location
				lcd_puts(lcd_string);					//sends data on cursor
				mins++;									//increments minutes
 362:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <mins.1958>
 366:	12 c0       	rjmp	.+36     	; 0x38c <__vector_9+0xec>
				if(mins > 59)							//zeroing after an hour
				{
					mins=0;								//sets minutes to 0
 368:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <mins.1958>
 36c:	4a e0       	ldi	r20, 0x0A	; 10
 36e:	be 01       	movw	r22, r28
 370:	6f 5f       	subi	r22, 0xFF	; 255
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
					itoa(mins, lcd_string, 10);			//sends minutes to string
					lcd_gotoxy(1, 0);					//sets cursor
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
					lcd_puts(lcd_string);				//sends data on cursor
 384:	ce 01       	movw	r24, r28
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
				}
				
				if(mins > 9)							//what happens after minutes reach 10
 38c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <mins.1958>
 390:	8a 30       	cpi	r24, 0x0A	; 10
 392:	80 f0       	brcs	.+32     	; 0x3b4 <__vector_9+0x114>
 394:	4a e0       	ldi	r20, 0x0A	; 10
 396:	be 01       	movw	r22, r28
 398:	6f 5f       	subi	r22, 0xFF	; 255
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
				{
					itoa(mins, lcd_string, 10);			//sends minutes to string
					lcd_gotoxy(1, 0);					//moves cursor to show tens of minutes
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
					lcd_puts(lcd_string);				//sends string data on cursor
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 3b2:	0f c0       	rjmp	.+30     	; 0x3d2 <__vector_9+0x132>
 3b4:	4a e0       	ldi	r20, 0x0A	; 10
 3b6:	be 01       	movw	r22, r28
 3b8:	6f 5f       	subi	r22, 0xFF	; 255
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
				}
				else
				{
					itoa(mins, lcd_string, 10);			//if there is less minutes than ten 
					lcd_gotoxy(2, 0);					//cursor is located at units of minutes
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
					lcd_puts(lcd_string);
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
				}
				
			}
			
			if(secs > 9)								//if there is more than nine seconds
 3d2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <secs.1957>
 3d6:	8a 30       	cpi	r24, 0x0A	; 10
 3d8:	80 f0       	brcs	.+32     	; 0x3fa <__vector_9+0x15a>
 3da:	4a e0       	ldi	r20, 0x0A	; 10
 3dc:	be 01       	movw	r22, r28
 3de:	6f 5f       	subi	r22, 0xFF	; 255
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
			{											//it writes at tens else it writes in 
				itoa(secs, lcd_string, 10);             //units of seconds
				lcd_gotoxy(4, 0);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	84 e0       	ldi	r24, 0x04	; 4
 3ec:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
				lcd_puts(lcd_string);
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 3f8:	0f c0       	rjmp	.+30     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fa:	4a e0       	ldi	r20, 0x0A	; 10
 3fc:	be 01       	movw	r22, r28
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
			}
			else
			{
				
				itoa(secs, lcd_string, 10);
				lcd_gotoxy(5, 0);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
				lcd_puts(lcd_string);
 410:	ce 01       	movw	r24, r28
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
			}
			
			square_secs = secs * secs;					//square of seconds
 418:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <secs.1957>
 41c:	88 9f       	mul	r24, r24
 41e:	c0 01       	movw	r24, r0
 420:	11 24       	eor	r1, r1
 422:	09 2e       	mov	r0, r25
 424:	00 0c       	add	r0, r0
 426:	aa 0b       	sbc	r26, r26
 428:	bb 0b       	sbc	r27, r27
 42a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <square_secs.1959>
 42e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <square_secs.1959+0x1>
 432:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <square_secs.1959+0x2>
 436:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <square_secs.1959+0x3>
			lcd_gotoxy(11, 0);							//sets cursor
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	8b e0       	ldi	r24, 0x0B	; 11
 43e:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
 442:	4a e0       	ldi	r20, 0x0A	; 10
 444:	be 01       	movw	r22, r28
 446:	6f 5f       	subi	r22, 0xFF	; 255
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <square_secs.1959>
 44e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <square_secs.1959+0x1>
 452:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
			itoa(square_secs, lcd_string, 10);			//send square of seconds in string
			lcd_puts(lcd_string);						//writes square seconds on display
 456:	ce 01       	movw	r24, r28
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
 45e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <tens.1956>
 462:	4a e0       	ldi	r20, 0x0A	; 10
 464:	be 01       	movw	r22, r28
 466:	6f 5f       	subi	r22, 0xFF	; 255
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
		}
	itoa(tens, lcd_string, 10);							//shows tenths of seconds
    lcd_gotoxy(7, 0);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	87 e0       	ldi	r24, 0x07	; 7
 474:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_puts(lcd_string);
 478:	ce 01       	movw	r24, r28
 47a:	01 96       	adiw	r24, 0x01	; 1
 47c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_puts>
		
    }
}
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <__vector_16>:
/**
 * ISR starts when Timer/Counter0 overflows. Update the progress bar on
 * LCD display every 16 ms.
 */
ISR(TIMER0_OVF_vect)
{
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
	static uint8_t number_of_overflows0 = 0;
    static uint8_t symbol = 0;
    static uint8_t position = 0;
	static uint8_t clearing_bar = 0;             		//helping number for clearing

	number_of_overflows0++;                      		//incrementing until overflow
 4cc:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <number_of_overflows0.1970>
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <number_of_overflows0.1970>
	symbol++;											//incrementing symbols in one position
 4d6:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <symbol.1971>
 4da:	9f 5f       	subi	r25, 0xFF	; 255
 4dc:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <symbol.1971>
	
	if (number_of_overflows0 > 5)                		//incrementing until 5 (96 ms )
 4e0:	86 30       	cpi	r24, 0x06	; 6
 4e2:	28 f1       	brcs	.+74     	; 0x52e <__vector_16+0x84>
	{
		number_of_overflows0 = 0;               		//preparing fro next overflow
 4e4:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <number_of_overflows0.1970>
		position++;										//set next position
 4e8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <position.1972>
 4ec:	8f 5f       	subi	r24, 0xFF	; 255
 4ee:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <position.1972>
		symbol=0;										//beginning 
 4f2:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <symbol.1971>
		
		if (position > 9)                        		//counting to one second
 4f6:	8a 30       	cpi	r24, 0x0A	; 10
 4f8:	d0 f0       	brcs	.+52     	; 0x52e <__vector_16+0x84>
		{
			while (clearing_bar<10)
 4fa:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 4fe:	8a 30       	cpi	r24, 0x0A	; 10
 500:	80 f4       	brcc	.+32     	; 0x522 <__vector_16+0x78>
			{
				lcd_gotoxy(1+clearing_bar, 1);			//jumping on needed position
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	8f 5f       	subi	r24, 0xFF	; 255
 506:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
				symbol=0;								//using empty character 
 50a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <symbol.1971>
				lcd_putc(symbol);						//clearing of positions
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
				clearing_bar++;
 514:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 518:	8f 5f       	subi	r24, 0xFF	; 255
 51a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
		position++;										//set next position
		symbol=0;										//beginning 
		
		if (position > 9)                        		//counting to one second
		{
			while (clearing_bar<10)
 51e:	8a 30       	cpi	r24, 0x0A	; 10
 520:	80 f3       	brcs	.-32     	; 0x502 <__vector_16+0x58>
				lcd_gotoxy(1+clearing_bar, 1);			//jumping on needed position
				symbol=0;								//using empty character 
				lcd_putc(symbol);						//clearing of positions
				clearing_bar++;
			}
			clearing_bar=0;                       		//preparing x for next loop
 522:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			position=0;                           		//setting position at beginning
 526:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <position.1972>
			symbol=0;									//setting character at empty
 52a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <symbol.1971>
		}
	}
	lcd_gotoxy(1+position, 1);							//setting cursor on position 1+
 52e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <position.1972>
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	8f 5f       	subi	r24, 0xFF	; 255
 536:	0e 94 90 00 	call	0x120	; 0x120 <lcd_gotoxy>
	lcd_putc(symbol-1);                           		//subtracting 1 to match the character table
 53a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <symbol.1971>
 53e:	81 50       	subi	r24, 0x01	; 1
 540:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_putc>
	
}
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	bf 91       	pop	r27
 54a:	af 91       	pop	r26
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	7f 91       	pop	r23
 552:	6f 91       	pop	r22
 554:	5f 91       	pop	r21
 556:	4f 91       	pop	r20
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <__itoa_ncheck>:
 566:	bb 27       	eor	r27, r27
 568:	4a 30       	cpi	r20, 0x0A	; 10
 56a:	31 f4       	brne	.+12     	; 0x578 <__itoa_ncheck+0x12>
 56c:	99 23       	and	r25, r25
 56e:	22 f4       	brpl	.+8      	; 0x578 <__itoa_ncheck+0x12>
 570:	bd e2       	ldi	r27, 0x2D	; 45
 572:	90 95       	com	r25
 574:	81 95       	neg	r24
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__utoa_common>

0000057c <__utoa_ncheck>:
 57c:	bb 27       	eor	r27, r27

0000057e <__utoa_common>:
 57e:	fb 01       	movw	r30, r22
 580:	55 27       	eor	r21, r21
 582:	aa 27       	eor	r26, r26
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	aa 1f       	adc	r26, r26
 58a:	a4 17       	cp	r26, r20
 58c:	10 f0       	brcs	.+4      	; 0x592 <__utoa_common+0x14>
 58e:	a4 1b       	sub	r26, r20
 590:	83 95       	inc	r24
 592:	50 51       	subi	r21, 0x10	; 16
 594:	b9 f7       	brne	.-18     	; 0x584 <__utoa_common+0x6>
 596:	a0 5d       	subi	r26, 0xD0	; 208
 598:	aa 33       	cpi	r26, 0x3A	; 58
 59a:	08 f0       	brcs	.+2      	; 0x59e <__utoa_common+0x20>
 59c:	a9 5d       	subi	r26, 0xD9	; 217
 59e:	a1 93       	st	Z+, r26
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	79 f7       	brne	.-34     	; 0x582 <__utoa_common+0x4>
 5a4:	b1 11       	cpse	r27, r1
 5a6:	b1 93       	st	Z+, r27
 5a8:	11 92       	st	Z+, r1
 5aa:	cb 01       	movw	r24, r22
 5ac:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <strrev>

000005b0 <strrev>:
 5b0:	dc 01       	movw	r26, r24
 5b2:	fc 01       	movw	r30, r24
 5b4:	67 2f       	mov	r22, r23
 5b6:	71 91       	ld	r23, Z+
 5b8:	77 23       	and	r23, r23
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <strrev+0x4>
 5bc:	32 97       	sbiw	r30, 0x02	; 2
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <strrev+0x18>
 5c0:	7c 91       	ld	r23, X
 5c2:	6d 93       	st	X+, r22
 5c4:	70 83       	st	Z, r23
 5c6:	62 91       	ld	r22, -Z
 5c8:	ae 17       	cp	r26, r30
 5ca:	bf 07       	cpc	r27, r31
 5cc:	c8 f3       	brcs	.-14     	; 0x5c0 <strrev+0x10>
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
